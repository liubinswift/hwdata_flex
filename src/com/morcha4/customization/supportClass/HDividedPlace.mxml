<?xml version="1.0" encoding="utf-8"?>
<mx:HDividedBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				dividerRelease="onRelease(event)" xmlns:local="*"
				dividerPress="onPress(event)"
				dividerDrag="onDrag(event)"
				width="100%" height="100%" creationComplete="init()"  dividerSkin="{com.morcha4.customization.supportClass.BoxDivider}" dividerAffordance="5" horizontalGap="6"
				horizontalScrollPolicy="off" verticalScrollPolicy="off" xmlns:customization="com.morcha4.customization.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.morcha4.customization.supportClass.BoxDivider;
			
			import flash.utils.clearTimeout;
			import flash.utils.setTimeout;
			
			import mx.containers.dividedBoxClasses.BoxDivider;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			private var _leftM:int=-1;
			private var _rightM:int=-1;
			private var _leftPercent:int=-1;
			private function init():void{
				getDividerAt(0).toolTip="拖动改变布局\n按住鼠标左键半秒可精确布局";
			}
			[Bindable]
			public function set leftM(value:int):void{
				_leftM=value;
				_rightM=-1;
				_leftPercent=-1;
				invalidateDisplayList();
			}
			public function get leftM():int{
				return _leftM;
			}
			[Bindable]
			public function set rightM(value:int):void{
				_leftM=-1;
				_rightM=value;
				_leftPercent=-1;
				invalidateDisplayList();
			}
			public function get rightM():int{
				return _rightM;
			}
			[Bindable]
			public function set leftPercent(value:int):void{
				_leftM=-1;
				_rightM=-1;
				_leftPercent=value;
				invalidateDisplayList();
			}
			public function get leftPercent():int{
				return _leftPercent;
			}
			private var configTime:int;
			private function onPress(e:Event):void{
				if(!isConfig){
					configTime=setTimeout(onConfig,400);
				}
			}
			private function onDrag(e:Event):void{
				clearTimeout(configTime);
			}
			private function onRelease(e:Event):void{
				clearTimeout(configTime);
				notC=true;
				this.addEventListener(FlexEvent.UPDATE_COMPLETE,onUpdate);
			}
			private function onUpdate(e:Event):void{
				notC=false;
				this.removeEventListener(FlexEvent.UPDATE_COMPLETE,onUpdate);
				if(leftM!=-1){
					leftM=getDividerAt(0).x;
				}else if(rightM!=-1){
					rightM=width-getDividerAt(0).x-6;
				}else{
					leftPercent=Math.round(getDividerAt(0).x/width*100);
				}
				invalidateDisplayList();
			}
			private var notC:Boolean=false;
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void{
				if(!notC){
					if(leftM!=-1){
						leftChild.width=leftM;
						rightChild.percentWidth=100;
					}else if(rightM!=-1){
						leftChild.percentWidth=100;
						rightChild.width=rightM;
					}else if(leftPercent!=-1){
						leftChild.percentWidth=leftPercent;
						rightChild.percentWidth=100-leftPercent;
					}else{
						leftChild.percentWidth=rightChild.percentWidth=50;
					}
				}
				super.updateDisplayList(unscaledWidth,unscaledHeight);
			}
			private function onConfig():void{
				startConfig();
				var con:HDividerConfig=new HDividerConfig;
				con.hDivider=this;
				PopUpManager.addPopUp(con,this,false);
				PopUpManager.centerPopUp(con);
			}
			private var isConfig:Boolean;
			private function startConfig():void{
				isConfig=true;
				stage.focus=null;
				leftChild.enabled=rightChild.enabled=false;
				this.setStyle("borderStyle","solid");
			}
			public function endConfig():void{
				isConfig=false;
				leftChild.enabled=rightChild.enabled=true;
				this.setStyle("borderStyle","none");
			}
		]]>
	</fx:Script>
	<customization:percentPlacePan id="leftChild" height="100%" width="100%"/>
	<customization:percentPlacePan id="rightChild" height="100%"  width="100%"/>
</mx:HDividedBox>
