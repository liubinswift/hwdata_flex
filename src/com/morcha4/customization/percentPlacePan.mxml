<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:local="*"
		 xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"  
		  width="100%" height="100%" clipAndEnableScrolling="true"
		 tabFocusEnabled="true" implements="mx.managers.IFocusManagerComponent"
		 rollOver="group1_rollOverHandler(event)" rollOut="group1_rollOutHandler(event)"
		 doubleClick="event.stopImmediatePropagation();if(hasContent){config_configContentHandler(null);}" doubleClickEnabled="true"
		 creationComplete="init()" xmlns:supportClass="com.morcha4.customization.supportClass.*">
	<!-- keyDown="if(!parent)return;event.stopImmediatePropagation();dividBox(event.keyLocation==KeyLocation.LEFT);"
	focusIn="return;if(stage.focus==this)drawFocus(true)"  chromeColor="0xff0000" focusColor="0xff0000"-->
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Metadata>
		[Style(name="backgroundColor", inherit="no", type="uint",format="Color")]
		[Style(name="backgroundAlpha", inherit="no", type="Number")]
		[Style(name="dividLineColor", inherit="no", type="uint",format="Color")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.morcha4.customization.CustomizationManager;
			import com.morcha4.customization.interfaces.IConfigPan;
			import com.morcha4.customization.supportClass.HDividedPlace;
			import com.morcha4.customization.supportClass.VDividedPlace;
			import com.morcha4.frame.system.AdvancedEvent;
			
			import mx.containers.DividedBox;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.core.INavigatorContent;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			
			public static const dbName:String="placePanChild";
			
			[Bindable]public var source:String;
			
			[Bindable]public var hasContent:Boolean=false;
			private var _content:XML;
			public function set content(obj:XML):void{
				_content=obj;
				hasContent=obj!=null;
				if(hasContent){
					//通过obj.ID获取内容详细信息后添加缩略图
					source=CustomizationManager.getIMG(obj.@["id"]);
					_config=obj.copy();
				}else{
					//清除缩略图
					source="";
					_config=new XML("<config/>");
				}
			}
			private var _config:XML=new XML("<config/>"); 
			public function get Config():XML{
				if(_config){
					_config.@["id"]=_content.@["id"];
					return _config;
				}else{
					return new XML("<config id=\""+_content.@["id"]+"\"/>");
				}
			}
			public function get content():XML{
				return _content;
			}
			public function dividBox(isH:Boolean):void{
				var db:Object=isH?new HDividedPlace:new VDividedPlace;
				if(isH){
//					db.leftM=this.mouseX;
					db.leftPercent=mouseX*100/width;
				}else{
//					db.leftM=this.mouseY;
					db.leftPercent=mouseY*100/height
				}
				db.name=dbName;
				this.addElement(db as IVisualElement);
				changeState(false);
				db.addEventListener(FlexEvent.CREATION_COMPLETE,getF);
			}
			public function getF(e:Event):void{
//				e.currentTarget.rightChild.drawFocus(true);
				e.currentTarget.rightChild.stage.focus=e.currentTarget.rightChild as InteractiveObject;
			}
			public var isLeaf:Boolean=true;
			public function changeState(isLeaf:Boolean):void{
				this.isLeaf=isLeaf;
				re.visible=isLeaf;
				if(!isLeaf){configPan.alpha=0;content=null}
				this.tabEnabled=this.focusEnabled=this.tabFocusEnabled=isLeaf;
			}
			
			protected function group1_rollOverHandler(event:MouseEvent):void
			{
				if(isLeaf){
					configPan.alpha=1;
					setElementIndex(configPan,numElements-1);
				}
			}
			
			protected function group1_rollOutHandler(event:MouseEvent):void
			{
				if(!containsElement(event.relatedObject as IVisualElement)){
					configPan.alpha=0;
				}
			}
			
			protected function config_deletePanHandler(event:Event):void
			{
				var lid:String=id=="leftChild"?"rightChild":"leftChild";
				var l:percentPlacePan=parent[lid] as percentPlacePan;
				if(l.isLeaf){
					(parent.parent as percentPlacePan).changeState(true);
					(parent.parent as percentPlacePan).content=l.content;
					(parent.parent as percentPlacePan).removeElement(parent as IVisualElement);
				}else{
					(parent.parent as percentPlacePan).addElement(l.getChildByName(dbName) as IVisualElement);
					(parent.parent as percentPlacePan).removeElement(parent as IVisualElement);
				}
				
			}
			
			protected function config_clearContentHandler(event:Event):void
			{
				content=null;
			}
			private var icp:IConfigPan;
			protected function config_configContentHandler(event:Event):void
			{
				icp=CustomizationManager.getConfigPan(content.@["id"]) as IConfigPan;
				UIComponent(icp).addEventListener(CustomizationManager.CONFIG_COMPLETED,onConfigEnd);
				icp.config=this.Config;
				PopUpManager.addPopUp(icp as IFlexDisplayObject,FlexGlobals.topLevelApplication as DisplayObject,true,null,FlexGlobals.topLevelApplication as IFlexModuleFactory);
				PopUpManager.centerPopUp(icp as IFlexDisplayObject);
			}
			private function onConfigEnd(e:AdvancedEvent):void{
				if(!icp)return;
				if(e.data){
					_config=icp.config;
				}
				UIComponent(icp).removeEventListener(CustomizationManager.CONFIG_COMPLETED,onConfigEnd);
				PopUpManager.removePopUp(icp as IFlexDisplayObject);
				icp=null;
			}
			private function init():void{
				addEventListener(DragEvent.DRAG_ENTER,onDragEnter);
			}
			private function onDragEnter(e:DragEvent):void{
				if(!isLeaf){
					return;
				}
				var format:Object=e.dragSource.dataForFormat("customDrag");
				if(!format)return;
				if(format.type=="divid"&&!(isLeaf&&!hasContent))return;
				addEventListener(DragEvent.DRAG_OVER,onDragOver);
				addEventListener(DragEvent.DRAG_EXIT,onDragExit);
				addEventListener(DragEvent.DRAG_DROP,onDragDrop);
				
				DragManager.acceptDragDrop(this);
				switch(format.type){
					case "divid":{
						if(format.data=="H"){
							hDivid.visible=true;
						}else{
							vDivid.visible=true;
						}
						onDragOver(null);
						break;
					}
					case "content":{
						break;
					}
				}
			}
			private function onDragOver(e:DragEvent):void{
				if(hDivid.visible){
					hDivid.y=mouseY;
				}else{
					vDivid.x=mouseX;
				}
			}
			private function onDragExit(e:DragEvent):void{
				removeEventListener(DragEvent.DRAG_OVER,onDragOver);
				removeEventListener(DragEvent.DRAG_EXIT,onDragExit);
				removeEventListener(DragEvent.DRAG_DROP,onDragDrop);
				hDivid.visible=vDivid.visible=false;
			}
			private function onDragDrop(e:DragEvent):void{
				switch(e.dragSource.dataForFormat("customDrag").type){
					case "divid":{
						dividBox(vDivid.visible);
						onDragExit(null);
						break;
					}
					case "content":{
						content=e.dragSource.dataForFormat("customDrag").data
						break;
					}
				}
			}
			
		]]>
	</fx:Script>
	<s:Rect id="re" width="100%" height="100%">
		<s:fill>
			<s:SolidColor id="co" color="{getStyle('backgroundColor')}" alpha="{getStyle('backgroundAlpha')}"/>
		</s:fill>
	</s:Rect>
	<s:BitmapImage width="100%" height="100%" fillMode="scale" scaleMode="stretch" source="{source}"  alpha="{getStyle('backgroundAlpha')}"/>
	<s:Line id="hDivid" width="100%" visible="false">
		<s:stroke>
			<s:SolidColorStroke color="{getStyle('dividLineColor')}"/>
		</s:stroke>
	</s:Line>
	<s:Line id="vDivid" height="100%" visible="false">
		<s:stroke>
			<s:SolidColorStroke color="{getStyle('dividLineColor')}"/>
		</s:stroke>
	</s:Line>
	<supportClass:PlacePanConfig id="configPan" pan="{this}" alpha="0" deletePan="config_deletePanHandler(event)"
						  clearContent="config_clearContentHandler(event)" configContent="config_configContentHandler(event)"/>
</s:Group>
