<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.morcha4.frame.nav.NavManager;
			import com.morcha4.frame.system.AdvancedEvent;
			import com.morcha4.frame.system.BasePage;
			
			import flash.utils.setTimeout;
			
			import mx.controls.Alert;
			import mx.core.Container;
			import mx.core.IVisualElement;
			import mx.core.IVisualElementContainer;
			import mx.core.UIComponent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			public static const TRANSFORM_PAGE:String="pageframe_transfrom_page";
			public static const TRANSFORM_EFFECT_END:String="transfrom_effect_end";
			public static var direction:Boolean=true;//left->right
			/**
			 * 用于切换页面
			 */ 
			private static var _instance:PageFrame;
			
			public static function getInstance():PageFrame{
				if(!_instance){
					_instance=new PageFrame();
					_instance.addEventListener(PageFrame.TRANSFORM_PAGE,_instance.switchPage);
				}
				return _instance;
			}
			private var oldPage:BasePage;
			private var waitPage:BasePage;
			public var useEffect:Boolean=false;
			private function switchPage(e:AdvancedEvent):void{
				
				if(!useEffect){
					setTimeout(handleEffect,10,e);
				}else{
					handleEffect(e);
				}
//				setTimeout(handleEffect,40,e);
			}
			private function handleEffect(e:AdvancedEvent):void{
				var target:BasePage=e.data as BasePage;
				if(!target){
					Alert.show("切换目标页面为空！");
					return;
				}
				if(oldPage){
					oldPage.dispatchEvent(new Event(BasePage.CLOSE));
				}
				waitPage=target;
				PageTransformManager.getInstance().dispatchEvent(new Event(PageTransformManager.BEGIN_LOADING_PAGE));
				if(oldPage&&target!=oldPage&&this.useEffect&&!(target is TempPage)){
					TransEffectManager.getInstance().getEffect().play(oldPage,target);
					this.addEventListener(PageFrame.TRANSFORM_EFFECT_END,onEffectEnd);
				}else{
					onEffectEnd(null);
				}
			}
			private function onEffectEnd(e:Event):void{
				if(oldPage){
					this.removeElement(oldPage);
				}
				if(!this.containsElement(waitPage)){
					this.addElement(waitPage);
				}
				waitPage.visible=true;
				
				oldPage=waitPage;
				PageTransformManager.getInstance().dispatchEvent(new Event(PageTransformManager.TRANSFORM_END));
				waitPage.dispatchEvent(new Event(BasePage.SHOW));
			}
			private var _pageFrameInstance:IVisualElementContainer;
			public function set pageFrameInstance(ins:IVisualElementContainer):void{
				_pageFrameInstance=ins;
//				initLisener();
			}
			public function get pageFrameInstance():IVisualElementContainer{
				return _pageFrameInstance;
			}
			private function initLisener():void{
				(pageFrameInstance as EventDispatcher).addEventListener(MouseEvent.MOUSE_DOWN,onMouseDown);
			}
			private var mp:Point;
			private function onMouseDown(e:MouseEvent):void{
				mp=new Point(e.localX,e.localY);
				(pageFrameInstance as EventDispatcher).addEventListener(MouseEvent.MOUSE_UP,onMouseUp);
				(pageFrameInstance as EventDispatcher).addEventListener(MouseEvent.ROLL_OUT,onMouseUp);
				setTimeout(timeOut,300);
			}
			private function timeOut():void{
				(pageFrameInstance as EventDispatcher).removeEventListener(MouseEvent.MOUSE_UP,onMouseUp);
				(pageFrameInstance as EventDispatcher).removeEventListener(MouseEvent.ROLL_OUT,onMouseUp);
				mp=null;
			}
			private function onMouseUp(e:MouseEvent):void{
				if(NavManager.getInstance().lock){
					return;
				}
				if(mp&&Point.distance(mp,new Point(e.localX,e.localY))>100){
					if(Math.abs(mp.x-e.localX)>Math.abs(mp.y-e.localY)){
						if(mp.x>e.localX){
							direction=false;
							NavManager.getInstance().dispatchEvent(new AdvancedEvent(NavManager.MODULE_PRE,false,false));
						}else{
							NavManager.getInstance().dispatchEvent(new AdvancedEvent(NavManager.MODULE_NEXT,false,false));
						}
					}else{
						if(mp.y>e.localY){
							Alert.show("上一级");
						}else{
							Alert.show("下一级");
						}
					}
				}
				timeOut();
			}
			override public function addElement(element:IVisualElement):IVisualElement{
				if(pageFrameInstance){
					return pageFrameInstance.addElement(element);
				}
				Alert.show("未设置主页面");
				return null;
			}
			override public function removeElement(element:IVisualElement):IVisualElement{
				if(pageFrameInstance){
					return pageFrameInstance.removeElement(element);
				}
				Alert.show("未设置主页面");
				return null;
			}
		]]>
	</fx:Script>
</s:Group>
