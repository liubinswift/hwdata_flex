<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2010 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the anchor button on a Spark DropDownList component.  

      @see spark.components.DropDownList        
      @see spark.skins.spark.DropDownListSkin
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="21" minHeight="21" clipAndEnableScrolling="true">
    
    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
    ]]>
    </fx:Metadata> 
    
     <fx:Script fb:purpose="styling">
         /* Define the skin elements that should not be colorized. 
            For dropDownList buttons, the graphics are colorized but the arrow is not. */
         static private const exclusions:Array = ["arrow"];

         /**
          * @private
          */  
         override public function get colorizeExclusions():Array {return exclusions;}
        
         
         /**
          * @private
          */
         override protected function initializationComplete():void
         {
             useChromeColor = true;
             super.initializationComplete();
         }
         
    </fx:Script>
      
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
    
    
    
    <s:Rect left="1" right="1" bottom="1" top="1">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="{getStyle('fillColors')[0]}" color.down="{getStyle('fillColors')[1]}"/>
				<s:GradientEntry color="{getStyle('fillColors')[1]}" color.down="{getStyle('fillColors')[0]}"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	<s:Group left="0" right="0" bottom="0" top="0" clipAndEnableScrolling="true" verticalScrollPosition="{-1*height/2+1}" includeIn="over">
		<s:Ellipse height="100%" width="100%">
			<s:fill>
				<s:RadialGradient>
					<s:GradientEntry color="{getStyle('lightColor')}"/>
					<s:GradientEntry color="{getStyle('lightColor')}" alpha=".1"/>
				</s:RadialGradient>
			</s:fill>
		</s:Ellipse>
	</s:Group>
	
    <!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
    <!--- @private -->
    <s:Rect id="border" left="0" right="0" top="0" bottom="0" width="69" height="20">
        <s:stroke>
            <s:SolidColorStroke color="{getStyle('borderColor')}"/>
        </s:stroke>
    </s:Rect>
    <s:Rect right="18" top="4" bottom="4" width="1">
        <s:fill>
             <s:SolidColor color="{getStyle('dividColor')}"/>
        </s:fill>
    </s:Rect>

    <!-- layer 8: arrow -->
    <!--- The arrow graphic displayed in the anchor button. -->
    <s:Path right="6" verticalCenter="0" id="arrow"
          data="M 4.0 4.0 L 4.0 3.0 L 5.0 3.0 L 5.0 2.0 L 6.0 2.0 L 6.0 1.0 L 7.0 1.0 L 7.0 0.0 L 0.0 0.0 L 0.0 1.0 L 1.0 1.0 L 1.0 2.0 L 2.0 2.0 L 2.0 3.0 L 3.0 3.0 L 3.0 4.0 L 4.0 4.0">
        <s:fill>
			<s:SolidColor color="{getStyle('arrowColor')}" alpha="0.8"/>
        </s:fill>
    </s:Path>
</s:SparkSkin>
