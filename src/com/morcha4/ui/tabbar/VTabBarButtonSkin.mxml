<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- 
The default skin class for Spark TabBar buttons.  

@see spark.components.TabBar
@see spark.skins.spark.TabBarSkin

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->

<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
				   minWidth="21" minHeight="21"
				   alpha.disabled="0.5" >
	
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.ButtonBarButton")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling" >
        
        
		
		import mx.core.IVisualElementContainer;
		
		import spark.components.TabBar;
		import spark.filters.DropShadowFilter;
		import spark.filters.GlowFilter;
		
		static private const exclusions:Array = ["labelDisplay"];
		
		/** 
		 * @private
		 */     
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>
	
	<s:Group left="0" right="0" top="0" bottom="0" clipAndEnableScrolling="true" mouseChildren="false" mouseEnabled="false" blendMode="layer" id="gr"  filters="{[new spark.filters.DropShadowFilter(4,135,0x000000,0.7)]}">
		<s:BitmapImage source="{getStyle('source')}" source.selectedStates="{getStyle('selectSource')}" fillMode="scale" width="100%" height="100%" />
		<s:BitmapImage source="{getStyle('overSource')}" includeIn="overStates" fillMode="scale" width="100%" height="100%" top="0" bottom="0" maxHeight="{gr.height}"/>
		<s:BitmapImage  blendMode="alpha" source="{getStyle('jLeft')}" fillMode="repeat" height="100%"/>
		<s:BitmapImage  blendMode="alpha" source="{getStyle('jBottom')}" fillMode="repeat" bottom="0" width="100%"/>
		<s:BitmapImage  blendMode="alpha" source="{getStyle('jTop')}" fillMode="repeat" top="0" width="100%"/>
	</s:Group>
	<!-- layer 8: text -->
	<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:Label id="labelDisplay"
			 textAlign="center"
			 verticalAlign="middle" color.selectedStates="{getStyle('selectColor')}"
			 maxDisplayedLines="-1" maxWidth="{getStyle('fontSize')*((getStyle('numCol') as Number)+0.5)}"
			 horizontalCenter="0" verticalCenter="1"
			 left="6" left.selectedStates="8" right.selectedStates="8" right="6" top="6" bottom="6">
	</s:Label>
	<s:Group id="mm" left="0" right="0" top="0" bottom="0" rollOver="event.stopImmediatePropagation();var r:int"/>
</s:SparkButtonSkin>
