<?xml version="1.0" encoding="utf-8"?>
<flipBar:FlipBar xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" 
				 xmlns:flipBar="com.viewscenes.utils.flipBar.*"
				 creationComplete="init();">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.morcha4.RPC.RPCManager;
			import com.morcha4.RPC.request.RORequestParam;
			import com.viewscenes.utils.flipBar.FlipEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			/**
			 * 后台返回是否为分页形式数据
			 */
			private var isPaged:Boolean = true;
			/**
			 * 本次数据库查询的开始条数
			 */
			private var startRow:int = 0;
			/**
			 * 本次数据库查询的结束条数
			 */
			private var endRow:int = 0;
			/**
			 * 一次查询的总页数
			 */
			private var _totalPageQuery:int = 0;
			
			private var _resutlList:ArrayCollection = new ArrayCollection();//查询返回结果集
			private var callBackMethod:Function;//最终页面的回调方法
			private var errMessage:String = "异常：com.viewscenes.utils.page.PageBar ";
			//-----------------------------------------
			private function init():void{
				this.addEventListener("pageChange",dowork);
			}
			/**
			 * 一次查询的页数
			 */
			public function set totalPageQuery(i:int):void{
				_totalPageQuery=i;
			}
			/**
			 * 返回后台查询出来的全部数据
			 */
			public function get resutlList():ArrayCollection{
				return this._resutlList;
			}
			/**
			 * 每页信息数量
			 */
			public function set rowConutOfPage(i:int):void{
				_rowConut=i;
			}
			/**
			 * 主要作用在于初始化分页各个参数
			 * 
			 */
			override public function reset():void{
				super.reset();
				isPaged=true;
				_resutlList = new ArrayCollection();
			}
			public function dowork(event:FlipEvent):void{
				var pageArr:Array = event.data as Array;
				var i:int = _currpage;
				if(i<1){
					
				}
				var first:int = pageArr[0] as int;//此次查询的开始条数
				var end:int = (pageArr[1] as int) + first -1;//此次查询的结束条数
				
				if(!(first >= startRow && end <= endRow)&&isPaged)
				{
					var nn:int = first/_rowConut;
					var queryCount:int = _rowConut * _totalPageQuery;//一次从数据库查询到的条数
					var partCount1:int = _totalPageQuery/2;//前一部分条数
					var partCount2:int = _totalPageQuery - partCount1;//后一部分条数
					partCount1 = partCount1*_rowConut;
					partCount2 = partCount2*_rowConut;
					
					if((first - partCount1)<=0){
						startRow = 1;
					} else{
						startRow = first - partCount1;
					}
					if((first + partCount2)>_total){
						endRow = _total;
					} else{
						endRow = first + partCount2-1;
					}
					
					if(startRow<1){
						startRow = 1;
					}
					if(endRow>_total){
						endRow = _total;
					}
					m_sendCmd_inner();
				}
				else{
					m_parseXML();
				}
			}
			
			
			//			/**
			//			 * 主要作用在于初始化分页各个参数
			//			 * 
			//			 */
			//			public function m_initquerydata():void
			//			{
			//				search_time=0;
			//				firstdata=0;
			//				enddata=_rowConut;
			//				first=0;
			//				total=0;
			//				search_num=search_pageCount*_rowConut;
			//				_resutlList = new ArrayCollection();
			//			}
			
			private var roParam:RORequestParam;
			/**
			 * 分页查询入口方法 
			 * @param roParam 参数对象
			 */		
			public function m_sendCmd(roPar:RORequestParam):void{
				this.enabled=false;
				this.roParam = roPar;
				
				this.reset();
				this.setCurrPage(1);
				this.resetRow();
				
				//startRow、endRow支持param为Object或继承了BaseBean的bean
				var param:Object = (this.roParam.param as Array)[0];
				param.startRow = startRow;
				param.endRow = endRow;
				/* 将本来的回调方法记录下来 */
				this.callBackMethod = this.roParam.callBack;
				/*  查询返回时先返回到分页组件里面的方法再返回到真正的回调方法里面  */
				this.roParam.callBack = m_queryProcess;
				RPCManager.sendCmd(this.roParam);
			}
			
			/**
			 * 初始化后台查询需要的开始和结束行
			 * 
			 */
			public function resetRow():void{
				startRow = 1;
				endRow = _totalPageQuery*_rowConut;
			}
			/**
			 * 分页组件内部使用查询
			 * 
			 */		
			private function m_sendCmd_inner():void{
				this.enabled=false;
				this.roParam = roParam;
				
				reset();
				
				this.setCurrPage(this._currpage);
				//startRow、endRow支持param为Object或继承了BaseBean的bean
				var param:Object = (this.roParam.param as Array)[0];
				param.startRow = startRow;
				param.endRow = endRow;
				RPCManager.sendCmd(this.roParam);
			}
			
			/**
			 * 分页查询返回数据后进行处理，然后发给调用方法
			 */
			public function m_queryProcess(resObject:Object,callBackMethod:Function=null ):void{
				//				trace(resObject.resultList.length);
				if(callBackMethod != null){
					this.reset();
					this.setCurrPage(1);
					this.resetRow();
					this.callBackMethod=callBackMethod;
				}
				_resutlList = resObject.resultList;//查询结果列表
				var resTotal:String = resObject.resultTotal + "";//查询结果总数
				//				trace("resTotal"+resTotal);
				var temptotal:int = 0;
				if(resTotal == null || resTotal == ""){
					temptotal = 0;
					isPaged = false;
				} else{
					try{
						temptotal = parseInt(resTotal);
					} catch(e){
						trace(errMessage+"查询结果总数不是数字"+resTotal);
					}
				}
				
				if(_total==0){
					total = temptotal;
				}
				if(_total==0){
					this.setCurrPage(0);
				} else{
					this.setCurrPage(this._currpage);
				}
				m_parseXML();
				this.enabled=true;
			}
			
			/**
			 * 取得分页数据给页面
			 * 根据用户选择的页数，在已查询的结果中取数据
			 */
			private function m_parseXML():void{
				var tempfrist:int = (_currpage-1) * _rowConut+1;//本次页面取数据首位置
				tempfrist = tempfrist - startRow;
				var numLen:int = _resutlList.length;//此次查询返回数据总数
				var tempend:int = tempfrist+_rowConut;
				if(tempend>numLen)
				{
					tempend = numLen;
				}
				/**后台查询开始行数从1开始
				 *从_resutlList中截取数据是从0开始的
				 * */
				//				Alert.show("startRow:"+startRow+"  endRow:"+endRow+"  tempfrist:"+tempfrist+"  tempend:"+tempend+"  numLen:"+numLen);
				var resList:ArrayCollection = new ArrayCollection(_resutlList.source.slice(tempfrist,tempend));//当前页面的数据
				callBackMethod(resList);
			}
		]]>
	</fx:Script>
</flipBar:FlipBar>
