<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"  minHeight="0" minWidth="0"
				   creationComplete="init();">
	<s:layout>
		<s:HorizontalLayout gap="-2" verticalAlign="middle"/>
	</s:layout>
	<s:HGroup id="oDateBox" gap="-2" verticalAlign="middle">
		<s:TextInput id="oYear" restrict="0-9"  maxChars="4" width="32" text="{_year}" borderVisible="false"
					  focusIn="onfocusIn(oYear)" focusOut="onfocusOut()" change="inputField_changeYears()"
					  focusAlpha="0" textAlign="right" />
		<mx:Text text="-" textAlign="center" width="8"/>
		<s:TextInput enter="changeFocus(oDay)" id="oMonth" restrict="0-9"  maxChars="2" width="19" text="{_month}" borderVisible="false"
					 focusIn="onfocusIn(oMonth)" focusOut="onfocusOut()" change="inputField_changeMonths()" 
					 focusAlpha="0" textAlign="right" />
		<mx:Text text="-" textAlign="center" width="8"/>
		<s:TextInput enter="changeFocus_day()" id="oDay" restrict="0-9" focusOut="onfocusOut()"  maxChars="2" width="19" text="{_day}" 
					  focusIn="onfocusIn(oDay)" change="inputField_changeDays()"  borderVisible="false"
					  focusAlpha="0" textAlign="right" />
	</s:HGroup>
	<s:HGroup id="oTimeBox" gap="-3" verticalAlign="middle" paddingLeft="3">
		<s:TextInput id="oHour" width="19" borderVisible="false"
					 change="inputField_changeHour()" enter="changeFocus(oMinute)" focusAlpha="0"
					 focusIn="onfocusIn(oHour)" focusOut="onfocusOut()" maxChars="2"
					 restrict="0-9" text="{_hour}" textAlign="right"/>
		<mx:Text text=":" textAlign="center"  width="8"/>
		<s:TextInput enter="changeFocus(oSecond)" id="oMinute"  restrict="0-9"  maxChars="2" width="19" text="{_minute}" 
					  focusIn="onfocusIn(oMinute)" focusOut="onfocusOut()" change="inputField_changeMinutes()"  borderVisible="false"
					  focusAlpha="0" textAlign="right"  />
		<mx:Text text=":" id="mSecond" textAlign="center"  width="8"/>
		<s:TextInput enter="changeFocus_second()" id="oSecond" restrict="0-9"  maxChars="2" width="19" text="{_second}"  borderVisible="false"
					  focusIn="onfocusIn(oSecond)" focusOut="onfocusOut()" change="inputField_changeSeconds()"  
					  focusAlpha="0" textAlign="right"   />
		<mx:DateField width="35" id="oDateFiled" visible="false"  formatString="YYYY-MM-DD" yearNavigationEnabled="true" 
					  change="dateFieldChange()" includeInLayout="false" dayNames="['日', '一', '二', '三', '四', '五', '六']" monthNames="['一月', '二月', '三月', '四月', '五月','六月', '七月', '八月', '九月', '十月', '十一月','十二月']"/>
	</s:HGroup>
	<mx:Image source="com/viewscenes/images/time/time.gif" click="openDate()" id="oPic"/>
	<mx:Image source="com/viewscenes/images/time/clearClean.jpg" click="clearDateText()" id="oPicClear" visible="true" includeInLayout="true"/>
	<fx:Metadata>
		[Event(name="TimeNewChanged", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			/*	公用方法
			*	dateDisplay  //日期类型 all全部显示 date只显示年月日 time只显示时分秒 alltimereadonly全部显示但是时间只读 timenew只显示时分
			*	text    	 //取得或设置日期时间  格式  "2009-01-12 12:09:18" 时分秒可以没有或者年月日可以没有
			*   setDate      //设置日期 new Date（）格式
			*	clearDate		 //设置是否显示清除日期按钮 true false
			*	yearValue    //取年值
			*	monthValue   //取月值
			*	dayValue     //取日值
			*	hourValue    //取时值
			*	minuteValue  //取分值
			*	secondValue  //取秒值
			*/
			private var dateType:String = "all";
			private var dValue:String="none";//设置的字符串时间
			private var inputField:spark.components.TextInput;
			[Bindable]
			private var _year:String="1900";
			[Bindable]
			private var _month:String="01";
			[Bindable]
			private var _day:String="01";
			[Bindable]
			private var _hour:String="00";
			[Bindable]
			private var _minute:String="00";
			[Bindable]
			private var _second:String="00";
			//			private var openStatus:Boolean=false;
			private var clearStatu:Boolean = false;
			private function init():void{
				this.contentGroup.clipAndEnableScrolling=true;
//				oDateBox.contentGroup.clipAndEnableScrolling=true;
//				oTimeBox.contentGroup.clipAndEnableScrolling=true;
				initDate();
				dateDisplayAfterComplete();
			}
			private function initDate():void{
				if(dValue=="none"){
					var nowDate:Date = new Date();
					setDate(nowDate);
				} else{
					text=dValue;
				}
			}
			
			public function get yearValue():String{
				_year = oYear.text;
				return _year;
			}
			public function get monthValue():String{
				_month = oMonth.text;
				return _month;
			}
			public function get dayValue():String{
				_day = oDay.text;
				return _day;
			}
			public function get hourValue():String{
				_hour = oHour.text;
				return _hour;
			}
			public function get minuteValue():String{
				_minute = oMinute.text;
				return _minute;
			}
			public function get secondValue():String{
				_second = oSecond.text;
				return _second;
			}
			/**
			 * 传入日期类型设置界面显示的时间
			 */
			public function setDate(date:Date):void{
				_year = date.getFullYear().toString();
				_month = (date.getMonth()+1)<10?"0"+(date.getMonth()+1):(date.getMonth()+1).toString();
				_day = date.getDate()<10?"0"+date.getDate():date.getDate().toString();
				_hour = date.getHours()<10?"0"+date.getHours():date.getHours().toString();
				_minute = date.getMinutes()<10?"0"+date.getMinutes():date.getMinutes().toString();
				_second = date.getSeconds()<10?"0"+date.getSeconds():date.getSeconds().toString();
				oYear.text = _year;
				oMonth.text = _month;
				oDay.text = _day;
				
				//如果_time不为空,则以_time为日期控件的时分秒
				if (_time != ""){
					var times:Array = _time.split(":");
					var h:Number = new Number(times[0]);
					var m:Number = new Number(times[1]);
					var s:Number = new Number(times[2]);
					_hour = h<10?"0"+h:h.toString();
					_minute = m<10?"0"+m:m.toString();
					_second = s<10?"0"+s:s.toString();
				}
				
				oHour.text = _hour;
				oMinute.text = _minute;
				oSecond.text = _second;
				
				if(oDateFiled!=null){
					oDateFiled.text=_year+"-"+_month+"-"+_day;
				}
			}
			/**
			 * 焦点移动控件移开后
			*/
			private function onfocusIn(textInput:spark.components.TextInput):void{
				inputField = textInput;
				textInput.selectAll();
//				textInput.selectionBeginIndex=0;
//				textInput.selectionEndIndex=textInput.length;
			}
			/**
			 * 焦点从控件移开后，监测各个输入框的内容使其合法
			*/
			public function onfocusOut():void{
				if(inputField==oYear){
					checkInput(1900,2300);
				}
				else if(inputField==oMonth){
					checkInput(1,12);
				}
				else if(inputField==oDay){
					var ayear:Number = new Number(oYear.text);
					var amonth:Number = new Number(oMonth.text);
					if(amonth==1||amonth==3||amonth==5||amonth==7||amonth==8||amonth==10||amonth==12){
						checkInput(1,31);	
					} else if(amonth==2){
						if(ayear%4==0){//闰年
							checkInput(1,29);	
						} else{
							checkInput(1,28);	
						}
					} else{
						checkInput(1,30);	
					}
					
				}
				else if(inputField==oHour){
					checkInput(0,23);
				}
				else if(inputField==oMinute){
					checkInput(0,59);
				}
				else if(inputField==oSecond){
					checkInput(0,59);
				}
			}
			private function checkInput(minNum:Number,maxNum:Number):void{
				if(inputField.text.length==0){
					inputField.text = minNum.toString();
				} else{
					var num:Number = Number(inputField.text);
					if(num>maxNum){
						inputField.text = maxNum.toString();
					}
					if(num<minNum){
						inputField.text = minNum.toString();
					}
				}
				if(maxNum.toString().length==2&&inputField.text.length==1){
					inputField.text = "0"+inputField.text;
				}
				
				if(inputField==oYear && this._year!=inputField.text){
					this._year=inputField.text;
					this.addTimeNewChangedEvent();
				}
				if(inputField==oMonth && this._month!=inputField.text){
					this._month=inputField.text;
					this.addTimeNewChangedEvent();
				}
				if(inputField==oDay && this._day!=inputField.text){
					this._day=inputField.text;
					this.addTimeNewChangedEvent();
				}
			}
			/**
			 * 输入小时2位后自动跳转到分钟输入框
			 */
			private function inputField_changeHour():void
			{   
				if(oHour.text.length==2){
					oMinute.setFocus();
				}
			}
			/**
			 * 输入分钟2位后自动跳转到秒钟输入框
			 */
			private function inputField_changeMinutes():void
			{
				if(oMinute.text.length==2){
					oSecond.setFocus();
				}
			}
			/**
			 * 输入秒钟2位后自动跳转到小时输入框
			 */
			private function inputField_changeSeconds():void
			{
				if(oSecond.text.length==2){
					if(dateType == "all"){
						oYear.setFocus();
					} else{
						oHour.setFocus();
					}
				}
				if(parseInt(oSecond.text)>59){
					oSecond.text = "59";
				}
			}
			/**
			 * 输入年4位后自动跳转到月输入框
			 */
			private function inputField_changeYears():void
			{
				if(oYear.text.length==4){
					oMonth.setFocus();
				}
			}
			/**
			 * 输入月2位后自动跳转到日输入框
			 */
			private function inputField_changeMonths():void
			{
				if(oMonth.text.length==2){
					oDay.setFocus();
				}
			}
			/**
			 * 输入日2位后自动跳转到小时输入框
			 */
			private function inputField_changeDays():void
			{   
				if(oDay.text.length==2){
					if(dateType == "date"){
						oYear.setFocus();
					} else{
						oHour.setFocus();
					}
				}
			}
			/**
			 * 通过控件选择日期
			 */
			private function openDate():void
			{
				//	        	openStatus = !openStatus;
				//	        	if(openStatus){
				//	        		oDateFiled.text = getDate();
				//	        		oDateFiled.open();
				//	        	} else{
				//	        		oDateFiled.close();
				//	        	}
				if(getDate().length==10){
					oDateFiled.text = getDate();
				}
				oDateFiled.open();
			}
			
			private function dateFieldChange():void
			{
				//setDisplay("time");
				if(text!=oDateFiled.text){
					text=oDateFiled.text;
					this.addTimeNewChangedEvent();
				}
			}
			private function addTimeNewChangedEvent():void{
				this.dispatchEvent(new Event("TimeNewChanged",true));//对外发送日期改变消息
			}
			/**
			* 控制显示日期 date:显示年月日 time:显示时分秒 timenew:显示小时分钟 否则全部显示
			**/
			public function set dateDisplay(str:String):void
			{
				dateType = str;
			}
			/**
			* 控制显示日期 date:显示年月日 time:显示时分秒 否则全部显示
			**/
			public function dateDisplayAfterComplete():void
			{
				if(dateType=="date"){
					//this.width=140;
					oTimeBox.visible=false;
					oTimeBox.includeInLayout=false;
					oDateBox.visible=true;
					oDateBox.includeInLayout=true;
					oPic.visible=true;
				} else if(dateType=="time"){
					//this.width=80;
					oDateBox.visible=false;
					oDateBox.includeInLayout=false;
					oTimeBox.visible=true;
					oTimeBox.includeInLayout=true;
					oPic.visible=false;
					oPic.includeInLayout=false;
				}else if(dateType=="timenew"){
					oDateBox.visible=false;
					oDateBox.includeInLayout=false;
					oTimeBox.visible=true;
					oTimeBox.includeInLayout=true;
					mSecond.visible=false;
					mSecond.includeInLayout=false;
					oSecond.visible=false;
					oSecond.includeInLayout=false;
					oPic.visible=false;
					oPic.includeInLayout=false;
				}else if(dateType=="all"){
					oDateBox.visible=true;
					oDateBox.includeInLayout=true;
					oTimeBox.visible=true;
					oTimeBox.includeInLayout=true;
					oPic.visible=true;
					//this.width=195;
				} else if(dateType=="alltimereadonly"){
					oDateBox.visible=true;
					oDateBox.includeInLayout=true;
					oTimeBox.visible=true;
					oTimeBox.includeInLayout=true;
					oTimeBox.enabled=false;
					oPic.visible=true;
				}
				oPicClear.visible = clearStatu;
				oPicClear.includeInLayout = clearStatu;
			}
			/**
			* 取得全部日期数据 "2009-01-12 12:09:18"
			*/
			public function getFullDate():String
			{
				var result:String = oYear.text+"-"+oMonth.text+"-"+oDay.text+" "+oHour.text+":"+oMinute.text+":"+oSecond.text;
				if(result.length!=19){
					result = "";
				}
				return result;
			}
			/**
			*取得年月日日期数据 "2009-01-12"
			*/
			public function getDate():String
			{
				var result:String = oYear.text+"-"+oMonth.text+"-"+oDay.text;
				if(result.length!=10){
					result = "";
				}
				return result;
			}
			/**
			*取得时分秒日期数据 "12:09:18"
			*/
			public function getTime():String
			{
				var result:String = oHour.text+":"+oMinute.text+":"+oSecond.text;
				if(result.length!=8){
					result = "";
				}
				return result;
			}
			/**
			 *取得时分数据 "12:09"
			 */
			public function getTimeNew():String
			{
				var result:String = oHour.text+":"+oMinute.text;
				if(result.length!=5){
					result = "";
				}
				return result;
			}
			
			/**
			*根据界面显示的内容取得日期值 
			* 如界面只显示年月日，则此方法只返回年月日的值
			*/
			public function get text():String
			{
				if(oDateBox.visible==false&&oTimeBox.visible==true&&oSecond.visible==true){
					return getTime();
				}else if(oDateBox.visible==false&&oTimeBox.visible==true&&oSecond.visible==false){
					return getTimeNew();
				}else if(oDateBox.visible==true&&oTimeBox.visible==false){
					return getDate();
				} else{
					return getFullDate();
				}
			}
			/**
			 * 补齐时间
			 * date:时间字符串
			 * dtype:时间类型   date:年月日   time:时分秒
			 */
			private function formateTime(date:String,dtype:String):String{
				if(dtype == "date" && date.length!=10){
					var ttArr:Array = date.split("-");
					for(var it:int=1;it<ttArr.length;it++){
						if(ttArr[it] == "0"){
							ttArr[it] = "1";
						}
						if((ttArr[it] as String).length == 1){
							ttArr[it] = "0"+ttArr[it];
						} else if((ttArr[it] as String).length == 0){
							ttArr[it] = "01";
						}
					}
					if((ttArr[0] as String).length == 0){
						ttArr[0] = "1900";
					} else if((ttArr[0] as String).length == 1){
						ttArr[0] = "000"+ttArr[0];
					} else if((ttArr[0] as String).length == 2){
						ttArr[0] = "00"+ttArr[0];
					} else if((ttArr[0] as String).length == 3){
						ttArr[0] = "0"+ttArr[0];
					}
					date = ttArr[0] + "-" + ttArr[1] + "-" + ttArr[2];
				} else if(dtype == "time" && date.length!=8){
					var ttArr:Array = date.split(":");
					for(var it:int=0;it<ttArr.length;it++){
						if((ttArr[it] as String).length == 1){
							ttArr[it] = "0"+ttArr[it];
						} else if((ttArr[it] as String).length == 0){
							ttArr[it] = "00";
						}
					}
					date = ttArr[0] + ":" + ttArr[1] + ":" + ttArr[2];
				}else if(dtype == "timenew" && date.length!=5){
					var ttArr:Array = date.split(":");
					for(var it:int=0;it<ttArr.length;it++){
						if((ttArr[it] as String).length == 1){
							ttArr[it] = "0"+ttArr[it];
						} else if((ttArr[it] as String).length == 0){
							ttArr[it] = "00";
						}
					}
					date = ttArr[0] + ":" + ttArr[1];
				}
				return date;
			}
			/**
			* 通过字符串设置界面显示的日期 
			* 格式  "2009-01-12 12:09:18" 时分秒可以没有或者年月日可以没有
			*/
			public function set text(date:String):void{
					try{
					if(date!=""){
						if(dateType == "all" && date.length!=19){
							var ttAllArr:Array = date.split(" ");
							date = formateTime(ttAllArr[0],"date") + " " + formateTime(ttAllArr[1],"time");
						} else if(dateType == "date" && date.length!=10){
							date = formateTime(date,dateType);
						} else if(dateType == "time" && date.length!=8){
							date = formateTime(date,dateType);
						}else if(dateType == "timenew" && date.length!=5){
							date = formateTime(date,dateType);
						}
					}
				}catch(e:Error){
					
				}
				dValue = date;
				if(date==null||date==""
					||((dateType=="all"||dateType=="alltimereadonly")&&!(date.length==19||date.length==10))
					||(dateType=="date"&&date.length!=10)
					||(dateType=="time"&&date.length!=8)
					||(dateType=="timenew"&&date.length!=5)){//赋空值
					try{
						oYear.text= "";
						oMonth.text = "";
						oDay.text = "";
						oHour.text = "";
						oMinute.text = "";
						oSecond.text = "";
					}catch(e){
						
					}
				}else{
					
					if(oSecond!=null){
						
						var nyear:Number = 0;
						var nmonth:Number = 0;
						var nday:Number = 0;
						var nhour:Number = 0;
						var nminute:Number = 0;
						var nsecond:Number = 0;
						var arr:Array = date.split(" ");
						//mx.controls.Alert.show(arr.length+"--"+arr[0]);
						var arrDate:Array = arr[0].toString().split("-");
						if(date.indexOf("-")>0){//存在年月日
							nyear = Number(arrDate[0]);
							nmonth = Number(arrDate[1])-1;
							nday = Number(arrDate[2]);
							if(arr.length>1){//存在时分秒
								var arrTime:Array = arr[1].toString().split(":");
								nhour = Number(arrTime[0]);
								nminute = Number(arrTime[1]);
								nsecond = Number(arrTime[2]);
							} else{
								nhour = Number(oHour.text);
								nminute = Number(oMinute.text);
								nsecond = Number(oSecond.text);
							}
						} else if(date.length<8){
							nyear = Number(oYear.text);
							nmonth = Number(oMonth.text);
							nday = Number(oDay.text);
							var arrTime1:Array = arr[0].toString().split(":");
							nhour = Number(arrTime1[0]);
							nminute = Number(arrTime1[1]);
							nsecond = Number(oSecond.text);
							}
						else{//不存在年月日，只有时分秒
							nyear = Number(oYear.text);
							nmonth = Number(oMonth.text);
							nday = Number(oDay.text);
							var arrTime1:Array = arr[0].toString().split(":");
							nhour = Number(arrTime1[0]);
							nminute = Number(arrTime1[1]);
							nsecond = Number(arrTime1[2]);
						}
						var nowDate:Date = new Date(nyear,nmonth,nday,nhour,nminute,nsecond);
						setDate(nowDate);
					}
				}
			}
			/**
			 * 回车后自动跳转到下一个输入框
			 **/
			private function changeFocus(obj:spark.components.TextInput):void{
				//if(event.charCode==13){
				obj.setFocus();
				//}
			}
			
			private function changeFocus_day():void
			{   
				if(dateType == "date"){
					oYear.setFocus();
				} else{
					oHour.setFocus();
				}
			}
			
			private function changeFocus_second():void
			{   
				if(dateType == "time"){
					oHour.setFocus();
				} else{
					oYear.setFocus();
				}
			}
			
			/**
			 * 清空日期
			 **/
			private function clearDateText():void{
				_year = "";
				_month = "";
				_day = "";
				_hour = "";
				_minute = "";
				_second = "";
			}
			/*
			* 设置是否显示清除日期按钮
			*/
			public function set clearDate(bb:Boolean):void{
				clearStatu = bb;
			}
			
			private var _time:String = "";
			/*
			* 设置显示的时分秒
			*/
			public function set starttime(time:String):void{
				this._time = time;
			}
			
		]]>
	</fx:Script>
</s:BorderContainer>
