<?xml version="1.0" encoding="utf-8"?>
<system:BasePage xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:system="com.morcha4.frame.system.*" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" 
				 width="100%" height="100%"  creationComplete="initApp();"
				 xmlns:timecomp="com.viewscenes.utils.timecomp.*" xmlns:DataGrid="mor.DataGrid.*"
				 xmlns:util="com.viewscenes.utils.*"
				 xmlns:flipBar="com.viewscenes.utils.flipBar.*"
				 xmlns:checkbox="com.viewscenes.global.comp.checkbox.*"
				 PAGE_SHOW="reset()"
				 xmlns:global="com.viewscenes.global.*">
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.morcha4.RPC.RPCException;
			import com.morcha4.RPC.RPCManager;
			import com.morcha4.RPC.request.RORequestParam;
			import com.morcha4.editor.ComboBoxEditor;
			import com.morcha4.editor.EditorManager;
			import com.morcha4.editor.TextEditor;
			import com.morcha4.frame.system.AdvancedEvent;
			import com.morcha4.frame.system.EventBus;
			import com.morcha4.util.RendererUtil;
			import com.viewscenes.global.DataManager;
			import com.viewscenes.global.EventDeclare;
			import com.viewscenes.global.comp.MM;
			import com.viewscenes.utils.StringTool;
			
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ArrayUtil;
			import mx.utils.ObjectUtil;
			[Bindable]private var typeArray:ArrayCollection = new ArrayCollection([{label:"遥控站",value:"102"},{label:"采集点",value:"101"}]);
			[Bindable]private var FaultStatementArray:ArrayCollection = new ArrayCollection([{label:"全部",value:""},{label:"未解除",value:"0"},{label:"已解除",value:"1"}]);
			[Bindable]private var HandleStatementArray:ArrayCollection = new ArrayCollection([{label:"全部",value:""},{label:"未处理",value:"0"},{label:"已处理",value:"1"}]);
			
			[Bindable]private var selectedCounts:int = 0;  //选择总数
						
			//站点
			[Bindable]
			public var headendArr:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var etypevalue:ArrayCollection=new ArrayCollection();
			
			[Bindable]private var listEqu:ArrayCollection = new ArrayCollection();
				
			var ea_starttime:String="";
			var ea_endtime:String="";
			public function initApp():void{
				
				var tempq:Array = new Array({label:"全部",mode:""},{label:"供电异常报警",mode:"1"},{label:"接收机异常报警",mode:"2"},{label:"调制度卡报警",mode:"3"},{label:"调幅度卡报警",mode:"4"},{label:"语音压缩卡报警",mode:"5"},{label:"频偏卡报警",mode:"6"},{label:"电池电压低系统关机",mode:"7"},{label:"电视接收机异常",mode:"11"},{label:"视频压缩卡异常",mode:"12"});
				etypevalue = new ArrayCollection(tempq);
				
				TypeChange();
			}

			private function reset():void{
				var tempq:Array = new Array({label:"全部",mode:""},{label:"供电异常报警",mode:"1"},{label:"接收机异常报警",mode:"2"},{label:"调制度卡报警",mode:"3"},{label:"调幅度卡报警",mode:"4"},{label:"语音压缩卡报警",mode:"5"},{label:"频偏卡报警",mode:"6"},{label:"电池电压低系统关机",mode:"7"},{label:"电视接收机异常",mode:"11"},{label:"视频压缩卡异常",mode:"12"});
				etypevalue = new ArrayCollection(tempq);
				
				TypeChange();
			}
			private function TypeChange():void{  //指标设备报警选择
				
				if(this.Type.selectedItem.label.toString()=="采集点"){
					con_clewlabel(clew_label,false);
					headendArr.removeAll();
					var arr:ArrayCollection=DataManager.getHeadendByState("all","101",true);
					for(var i:int = 0;i<arr.length; i++){
						var obj:Object = arr.getItemAt(i);
						
						headendArr.addItem({label:obj.shortname,value:obj.code});
					}
					
				}
				else if(this.Type.selectedItem.label.toString()=="遥控站")				{
					
					con_clewlabel(clew_label,false);
					headendArr.removeAll();
					var arr:ArrayCollection=DataManager.getHeadendByState("all","102",true);
					for(var i:int = 0;i<arr.length; i++){
						var obj:Object = arr.getItemAt(i);
						
						headendArr.addItem({label:obj.shortname,value:obj.code});
					}
				}
				
			}
			
			function labFun(item:Object):String{
				if(item is String) return item.toString()
				return item.name+"("+item.code+")";
			}
			
			private function close(){
				this.parent.removeChild(this);
			}
			
			private function searchdata():void//主要作用在于初始化
			{

			
		
				var starttime:String=StartTime_day.text;
				var endtime:String=EndTime_day.text;
				
				if(starttime>endtime)
				{
					MM.show("开始时间不能大于结束时间，请重新输入！");
					var date:Date=new Date();
					var date1:Date=new Date();
					date.setHours(00,00,00);
					StartTime_day.setDate(date);
					EndTime_day.setDate(date1);
					return;
				}
				
				con_clewlabel(clew_label,true,'正在查询，请稍候...');
				Index_Fault();
			}
			
			//指标报警
			private function Index_Fault():void
			{
				
				var obj:Object = new Object;
				
			
				obj.type_id =this.Type.selectedItem.value;
				obj.head_name =this.station.getText("label");
				obj.isresumed =this.FaultStatement.selectedItem.value;
				obj.ishandled =this.HandleStatement.selectedItem.value;
				obj.starttime =StartTime_day.text;
				obj.enddate =EndTime_day.text;
				obj.etype =qtypelist.selectedItem.mode;
	
				
				pagebar.m_sendCmd(new RORequestParam("com.viewscenes.web.devicemgr.faultreport.FaultReport","getAlert_ManageList",obj,ProcessIndex_Fault,onfault));
				
			}
			private function ProcessIndex_Fault(list:ArrayCollection):void{ 
			
					con_clewlabel(clew_label,false);
					this.listEqu=list;
					
					listEqu.refresh();
					if(listEqu.length==0){
						
						con_clewlabel(clew_label,true,"无查询数据！");
					}
					
			}
			
			public function con_clewlabel(_component:Label,_visible:Boolean,_label:String="")
			{
				_component.visible=_visible;
				_component.includeInLayout=_visible;
				_component.text=_label;
			}
			
			private function onfault(e:RPCException):void
			{
				
				MM.show(e.message);
			}
			
			
			//选择点中后执行的方法
			private function changeSelect(obj:Object):void{
				selectAll.selected=false;
				if(obj.data.isSelected=="true"){
					this.selectedCounts=selectedCounts+1;  
				}else{
					this.selectedCounts=selectedCounts-1; 
				}
				if(selectedCounts==listEqu.length){
					selectAll.selected=true;
				}
			}
			
			private function timeFuc(item:Object,gc:GridColumn):String
			{
				var happend_time:String="";
				if(item.is_resume=="1")
					happend_time="自"+item.alarm_datetime+"至"+item.resume_datetime;
				else
					happend_time="自"+item.alarm_datetime+"未解除";
				
				return happend_time;
			}
			
			private function handleFuc(item:Object,gc:GridColumn):String
			{
				var handle_state:String="";
				if(item.is_handle=="1")
				{
					if(item.handle_datetime!="")
						handle_state="已处理于"+item.handle_datetime;
					else
						handle_state="已处理";
				}
				else 
					handle_state="未处理";
				
				return handle_state;
			}
			
			private function typeFuc(item:Object,gc:GridColumn):String
			{
				var typelable:String="";
				
				
				if(item.type=="1")
					typelable="供电异常报警[UPS]";
				else if(item.type=="2")
					typelable="接收机异常报警";
				else if(item.type=="3")
					typelable="调制度卡异常报警";
				else if(item.type=="4")
					typelable="调幅度卡报警";
				else if(item.type=="5")
					typelable="语音压缩卡异常报警";
				else if(item.type=="6")
					typelable="频偏卡报警";
				else if(item.type=="7")
					typelable="电池电压低系统关机";
				
				return typelable;
			}
			
			
			/**
			 * 删除
			 **/
			private var dellist:String = "";//删除详细数据id (多个id以逗号分隔)
			private function comfirmDelete():void{
				
				dellist ="";
				var del_number:Number = 0;

					for(var i:int=DeviceDataGrid.dataProvider.length-1;i>=0;i--)
					{
						if(DeviceDataGrid.dataProvider[i].isSelected=="true")
						{
							var alarm_id:String = DeviceDataGrid.dataProvider[i].alarm_id;
							
							if(del_number==0)
							{
								
								dellist = "'"+alarm_id+"'";
								
								
							} else{
								dellist += ","+"'"+alarm_id+"'";
							}
							del_number++;
						}
					}
					
					
				
				if(dellist!=""){
					
					MM.show("您确定要删除吗？","删除确认",'',clickDeleteChoose,true,null,null);

				}
				else{
					MM.show("请选择要删除的信息","警告");
					return;
				}
			}
			
			//选择删除任务
			private function clickDeleteChoose():void{
				deleteDetailData(dellist);
				
			}
			
			
			/**
			 * 删除查询的详细数据
			 **/
			public function deleteDetailData(dellist:String):void{
				
				var obj:Object = new Object();//在后台删除

					for(var ii:int=DeviceDataGrid.dataProvider.length-1;ii>=0;ii--) //在前台删除
					{
						if(DeviceDataGrid.dataProvider[ii].isSelected=="true")
						{
							DeviceDataGrid.dataProvider.removeItemAt(ii);
							this.selectedCounts=selectedCounts-1;
						}
					}
				
				obj.dellist=dellist;
				
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.devicemgr.faultreport.FaultReport","delFaultList",
					obj,_deleteQuality,onfault))
				
			}
			
			private function _deleteQuality(obj:Object):void{ 
				searchdata();
				MM.show("删除成功");
				
			}
			private function addFault():void{
				var popo:AddFaultForm = AddFaultForm(PopUpManager.createPopUp(this,AddFaultForm,true));
				
				PopUpManager.centerPopUp(popo);
				popo.addEventListener("Quality_list_refresh",refreshList);
				
			}
			
			private function editFault(obj:Object):void{
				openEditFaultForm(obj.data);
				
			}
			
			private function openEditFaultForm(obj:Object):void{
				var popo:EditFaultForm = EditFaultForm(PopUpManager.createPopUp(this,EditFaultForm,true));
				
				popo.setFault(obj);
				PopUpManager.centerPopUp(popo);
				popo.addEventListener("Quality_list_refresh",refreshList);
			}
			protected function refreshList(event:Event):void
			{
				// TODO Auto-generated method stub
				searchdata();
			}
			
			private function seeFault(obj:Object):void{
				openSeeFaultForm(obj.data);
				
			}
			
			private function openSeeFaultForm(obj:Object):void{
				
				var popo:SeeFaultForm = SeeFaultForm(PopUpManager.createPopUp(this,SeeFaultForm,true));
				
				popo.setFault(obj);
				PopUpManager.centerPopUp(popo);
				popo.addEventListener("Equ_list_refresh",refreshList);
			}
			
		
			
			private function auditorFault(obj12:Object):void
			{
				
				var obj:Object = new Object;
				obj.alerttab="quality";
				obj.operation="auditor";
				obj.auditor=DataManager.user.userName;
				
				obj.alarm_id=obj12.data.alarm_id;
				
				obj.head_code=obj12.data.head_code;
				
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.daily.FaultHandler.AlertManage","updAlert_DetailList",obj,Processupd_Fault,onfault));
				
			}
			
			private function Processupd_Fault(arr:ArrayCollection):void
			{
				if (arr.length>0){
					MM.show(RPCException(arr[0]).message);
				}else{
					
					MM.show("审核成功!");
					searchdata();
				}
				
			}
			
			private function doExcel():void{
				var url:String="com.viewscenes.web.devicemgr.faultreport.FaultReport";
				var func:String="doExcel";
				
				var head:String = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r';
				head += '<msg type="'+url+'" function="'+func+'">\r';
				var xmlText:String = head;
				
				xmlText += "<type_id>"+this.Type.selectedItem.value+"</type_id>";
				xmlText += "<head_name>"+this.station.getText("label")+"</head_name>";
				xmlText += "<isresumed>"+this.FaultStatement.selectedItem.value+"</isresumed>";
				xmlText += "<ishandled>"+this.HandleStatement.selectedItem.value+"</ishandled>";
				
				xmlText += "<starttime>"+StartTime_day.text+"</starttime>";
				xmlText += "<enddate>"+EndTime_day.text+"</enddate>";
				xmlText += "<etype>"+qtypelist.selectedItem.mode+"</etype>";
				xmlText += "</msg>";
				
				
				flash.external.ExternalInterface.call("toExcel",xmlText);
			}
			/**
			 * 全选控制
			 */
			private function selectAllItem():void{
				
				if(listEqu == null || listEqu.length ==0){
					return;
				}
				var check:Boolean = selectAll.selected;
				if(check){
					selectedCounts=listEqu.length;
				}else{
					selectedCounts=0;
				}
				for(var i:int=0; i<listEqu.length; i++){
					var Obj:Object = listEqu.getItemAt(i) as Object;
					Obj.isSelected = check.toString();
				}
				
				listEqu.refresh(); //这个必须有，因为Obj.isSelected的值有变化，列表结果的dataProvider需要重新装载，即重新渲染
			}
		]]>
	</fx:Script>
	<s:Group  left="9" right="9" width="100%" height="100%">
		<s:VGroup  width="100%" height="100%" horizontalAlign="left"  verticalAlign="middle" >
			<s:VGroup height="80"   id="grid" width="100%"   verticalAlign="middle">
				
				<s:HGroup height="38" width="100%"  verticalAlign="middle">
					
					<s:Label text="类    别："/>
			
					<s:ComboBox id="Type"  dataProvider="{typeArray}" change="TypeChange()" requireSelection="true" height="25" width="110"/>

					
					<s:Label text="站点代码：   " id="StationCodeLable"/>
			
					<checkbox:CheckDropList id="station"  dataProvider="{headendArr}"  filedLabel="label" />
					<!--global:HeadendList id="station"   height="25" width="180"/-->
			
					<s:Label text="异常状态：" id="FaultStatementLabel" visible="true"/>
		
					
					<s:ComboBox id="FaultStatement"  dataProvider="{FaultStatementArray}" requireSelection="true" height="25" width="110"/>
					<s:Label text="处理状态："/>
					
					<s:ComboBox id="HandleStatement"  dataProvider="{HandleStatementArray}" requireSelection="true" height="25" width="110"/>
					
				
					<s:Button buttonMode="true" label="返回" click="close()" id="oCloseButton" visible="false" includeInLayout="false"/>
				</s:HGroup>
				
				<mx:HRule width="100%" strokeWidth="1" strokeColor="#a0a0a0" shadowColor="#000000" />
				<s:HGroup height="38" width="100%"  verticalAlign="middle" >
					
					<s:Label text="报警类型："/>
						
					<s:ComboBox id="qtypelist" includeInLayout="true" dataProvider="{etypevalue}" requireSelection="true" labelField="label"  height="25" width="110">
					</s:ComboBox>
						
					<s:Label text="报警日期范围：自"/>
						
					<timecomp:TimeNew id="StartTime_day" starttime="00:00:00" />
						
					<s:Label text="      至      "/>
						
					<timecomp:TimeNew id="EndTime_day" starttime="23:59:59"/>
					<s:Spacer width="100%"/>
					<s:Button buttonMode="true" label="查询" click="searchdata()"  styleName="ButtonBlack"/>
					<s:Button buttonMode="true" label="添加" click="addFault()"  styleName="ButtonBlack"/>						
					<s:Button buttonMode="true" label="删除所选项"  click="comfirmDelete()" styleName="ButtonBlack"/>						
					<s:Button buttonMode="true" label="导出" click="doExcel()" styleName="ButtonBlack"/>				
				</s:HGroup>
			</s:VGroup>
			<s:Group width="100%" height="100%" top="12" bottom="60">
				
						<s:Group width="100%"  height="100%">
							<s:DataGrid id="DeviceDataGrid"  height="100%"  width="100%" dataProvider="{listEqu}" textAlign="center"  >
								
								<s:columns>
									<s:ArrayCollection>
										<s:GridColumn headerText="选择" width="50"  itemRenderer="{RendererUtil.getCheckBoxRenderer(changeSelect)}" />
										<s:GridColumn headerText="报警站点" width="80" dataField="shortname" />
										<s:GridColumn headerText="报警类别" labelFunction="typeFuc"/>
										<s:GridColumn headerText="发生时段" width="320" labelFunction="timeFuc"/>
										<s:GridColumn headerText="处理状态" width="200" labelFunction="handleFuc" />
										<s:GridColumn headerText="原因" dataField="reason" />
										<s:GridColumn  minWidth="50" headerText="修改" itemRenderer="{RendererUtil.getButtonRenderer('修改',editFault)}"/>
										<s:GridColumn  minWidth="50" headerText="详情" itemRenderer="{RendererUtil.getButtonRenderer('详情',seeFault)}"/>
										
									</s:ArrayCollection>
								</s:columns>
							</s:DataGrid>
						</s:Group>
			
				<s:Label text="正在查询，请稍候..." color="0x000000" id="clew_label" y="{DeviceDataGrid.columnHeaderGroup.height+10}" width="100%" textAlign="center"  visible="false" includeInLayout="false" />				
			</s:Group>
			<s:HGroup  width="100%" height="30" verticalAlign="middle" gap="10">
				<s:CheckBox id="selectAll" selected="false" change="selectAllItem()"/>
				<s:Label text="全选"/> 			
				<s:Label width="20"/>			
				<!--分页组件所在地-->
				<flipBar:PageBar   width="100%" id="pagebar" rowConutOfPage="40" totalPageQuery="5" height="20"/>
			</s:HGroup> 
		</s:VGroup>
		
	</s:Group>
</system:BasePage>
