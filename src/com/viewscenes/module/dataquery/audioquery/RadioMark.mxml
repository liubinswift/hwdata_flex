<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  width="100%" height="100%" 
		  xmlns:player="com.viewscenes.utils.player.*" 
		  xmlns:utils="com.viewscenes.utils.*"
		  creationComplete="init();">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.morcha4.RPC.RPCManager;
			import com.morcha4.RPC.request.RORequestParam;
			import com.viewscenes.beans.ASRResBean;
			import com.viewscenes.beans.RadioMarkZstViewBean;
			import com.viewscenes.beans.RadioStreamResultBean;
			import com.viewscenes.beans.pub.ResHeadendBean;
			import com.viewscenes.beans.runplan.RunplanBean;
			import com.viewscenes.beans.task.Task;
			import com.viewscenes.global.DataManager;
			import com.viewscenes.global.comp.MM;
			import com.viewscenes.utils.player.playBar.PlayBarEvent;
			import com.viewscenes.utils.timecomp.DateUtil;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			//同邻频
			[Bindable]
			private var tlp:ArrayCollection = new ArrayCollection([{label:"无",data:"0"},{label:"同频",data:"1"},{label:"邻频",data:"2"}]);
			
			
			//			[Bindable]
			//			private var streamResultBean:StreamHistoryQueryResult = null;
			
			[Bindable]
			private var radioStremResultBean:RadioStreamResultBean = null;
			
			//任务相关信息
			[Bindable]
			private var task:Task =null;
			
			//站点相关信息
			[Bindable]
			private var headendBean:ResHeadendBean =null;
			
			//运行图相关信息
			[Bindable]
			private var runplanBean:RunplanBean =null;
			
			//打分相关信息,该对象如何不为空，则可修改分数
			[Bindable]
			private var radioMarkzstViewBean:RadioMarkZstViewBean = null;
			
			//SIO表格刻度
			[Bindable]
			private var maxSIO:int = 5;
			[Bindable]
			private var minSIO:int = 0;
			//SIO一周打分情况数据
			[Bindable]
			private var sioArray:ArrayCollection = new ArrayCollection();
			
			//语音识别回来的结果
			[Bindable]
			private var asrResBean:ASRResBean = null;
			//打分类型 1:实时打分,2:录音打分
			private var markType:int = 1;
			
			public var showQuality:Boolean = true;
			public var showWeekMark:Boolean = true;
			public var showMark:Boolean = true;
			//			public var showJ:Boolean = true;
			public var showASR:Boolean = true;
			
			
			private var index:int= -1;
			public var recordQuery:AudioFileQuery = null;
			
			private function init():void{
				player.pb.addEventListener("stop",playerStop);
				
				_showQuality(showQuality);
				_showSIO(showWeekMark);
				_showMarkSIO(showWeekMark);
			
			}
			
			
			/**
			 *监听播放器停止方法 
			 */
			private function playerStop(event:PlayBarEvent):void{
				player.pb.status = "stop";
			}
			
			
			
			/**
			 * 获取从当前向前推一周该站点的打分和受干扰情况
			 */ 
			private function getMarkByPreWeek():void{
				var obj:Object = new Object;
				obj.headCode = headendBean.code;
				obj.station_id = runplanBean.station_id;
				obj.freq = task.freq;
				obj.mark_type = markType;
				
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.dataquery.audioquery.MarkService","getMarkByPreWeek",obj,getMarkByPreWeekBack,DataManager.showErrorMessageBack));
			}
			
			private function getMarkByPreWeekBack(arr:ArrayCollection):void{
				sioArray = arr;
			}
			
			private function mark_keyup(event:KeyboardEvent):void{
				var v:int = event.currentTarget.text as Number;
				if (v>5){
					event.currentTarget.text = "";
					event.currentTarget.setFocus();
					return;
				}
				
				if (event.currentTarget.id == "mark_s" && mark_s.text != ""){
					
					mark_i.setFocus();
				}else if (event.currentTarget.id == "mark_i" && mark_i.text != "")
					mark_o.setFocus();
				else if (event.currentTarget.id == "mark_o" && mark_o.text != ""){
					cJ.setFocus();
						
				}
					
				
			}
			
			
			private function descChange(event:Event):void{
				
				//				descReset();
				//				event.currentTarget.selected = true;
			}
			
			private function descReset():void{
				cJ.selected = true;
				cT.selected = false;
				cH.selected = false;
				cBC.selected = false;
				cHC.selected = false;
				cQ.selected = false;
			}
			
			private function getDesc():String{
				
				var desc:String = "";
				if (cJ.selected) desc += "J,";
				if (cT.selected) desc += "T,";
				if (cH.selected)  desc += "H,";
				if (cBC.selected) desc += "B.C,";
				//				if (cC.selected) desc += "C,";
				if (cHC.selected) desc += "HC,";
				if (cQ.selected) desc += "Q";
				
				if (desc.substr(desc.length-1,desc.length)==",")
					desc = desc.substr(0,desc.length-1);
				return desc;
			}
			
			/**
			 * 
			 * 检查打分
			 * */
			private function checkMark():Boolean{ 
				
				if (mark_s.text == ""){
					mark_s.setFocus();
//					DataManager.showErrorMessage("分值S不能为空");
					error.text = "分值S不能为空";
					return false;
				}else if (mark_i.text == "" || mark_i.text == "0"){
					mark_i.setFocus();
//					DataManager.showErrorMessage("分值I不能为空或0");
					error.text = "分值I不能为空或0";
					return false;
				}else if (mark_o.text == ""){
					mark_o.setFocus();
//					DataManager.showErrorMessage("分值O不能为空");
					error.text = "分值O不能为空";
					return false;
				}
				
				if (mark_o.text > mark_s.text){
					mark_o.text="";
					mark_o.setFocus();
//					DataManager.showErrorMessage("分值O不能大于S值");
					error.text = "分值O不能大于S值";
					return false;
				}
//				if (getDesc() == ""){
//					DataManager.showErrorMessage("请选择干扰类型");
//					return false;
//				}
				error.text = "";
				return true;
			}
			
			/**
			 * 打分
			 */ 
			private function setMark():void{
				
				if (checkMark() == true){
					
					//新打分
					if (this.radioMarkzstViewBean == null){
						var markBean:RadioMarkZstViewBean = new RadioMarkZstViewBean;
						
						if (radioStremResultBean == null){
							
							DataManager.showErrorMessage("没有可打分的录音");
							
							return;
						}
						
						if (headendBean == null){
							DataManager.showErrorMessage("获取站点信息不正确,请与开发人员联系");
							return ;
						}
						
						markBean.mark_user = DataManager.user.userName;
						markBean.head_code = headendBean.code;
						markBean.headname = headendBean.shortname;
						
						//是运行图任务有下列信息,临时任务没有下列信息
						if (runplanBean != null){
							markBean.station_id = runplanBean.station_id;
							markBean.station_name = runplanBean.station_name;
							//							markBean.language_name = runplanBean.language_name;
							markBean.runplan_id = runplanBean.runplan_id;
							markBean.play_time = runplanBean.start_time + "-" + runplanBean.end_time;
							markBean.languagename1 = runplanBean.language_name;
						}
						
						markBean.level_value = radioStremResultBean.levelValue;
						markBean.fm_value = radioStremResultBean.fmModulation;
						markBean.am_value = radioStremResultBean.amModulation;
						markBean.offeset_value = radioStremResultBean.offset;
						markBean.frequency = radioStremResultBean.frequency;
						markBean.equ_code = radioStremResultBean.equ_code;
						var timeDiff:String = DateUtil.timeDiff(DateUtil.str2date(radioStremResultBean.start_datetime),DateUtil.str2date(radioStremResultBean.end_datetime),"sec");
						markBean.file_length = timeDiff;
						markBean.record_start_time = radioStremResultBean.start_datetime;
						markBean.record_end_time = radioStremResultBean.end_datetime;						
						markBean.task_id = task.task_id;
						//现在没有任务名称，不用填写
						//					markBean.task_name = task.note;
						
						markBean.counti = mark_i.text;
						markBean.counto = mark_o.text;
						markBean.counts = mark_s.text;
						markBean.description = getDesc();
						markBean.mark_type = "2";//1:实时，2：录音
						markBean.file_length = radioStremResultBean.filesize;
						markBean.file_name =radioStremResultBean.filename;
						markBean.mark_file_url = radioStremResultBean.url;
						markBean.fm_value = radioStremResultBean.fmModulation;
						markBean.am_value=radioStremResultBean.amModulation;
						markBean.offeset_value =radioStremResultBean.offset;
						markBean.languagename1 = radioStremResultBean.language;
						
						markBean.remark = remark.text;
						var sDate:String = DateUtil.date2str(new Date);
						var dDate:Date = DateUtil.addHours(new Date(),1);
						
						var unit:String = sDate.substr(11,2)+":00:00-"+ DateUtil.date2str(dDate).substr(11,2)+":00:00";
						markBean.unit = unit;
						
						
						//					markBean.mark_id = 
						//					markBean.mark_datetime = 
						//					markBean.edit_user = 
						
						if (asrResBean != null){
							markBean.asr_type = asrResBean.type;
							markBean.result_type = asrResBean.timePeriodType;
							markBean.status = asrResBean.status;
							markBean.wavelen = asrResBean.wavelen
							markBean.musicratio = asrResBean.musicratio;
							markBean.noiseratio = asrResBean.noiseratio;
							markBean.speechlen = asrResBean.speechlen;
							markBean.totalcm = asrResBean.totalcm;
							markBean.audibilityscore = asrResBean.audibilityScore;
							markBean.audibilityconfidence = asrResBean.audibilityConfidence;
							markBean.channelname = asrResBean.channelName;
							markBean.channelnameconfidence = asrResBean.channelNameConfidence;
							markBean.programname = asrResBean.programName;
							markBean.programnameconfidence = asrResBean.programNameConfidence;
							markBean.languageconfidence1 = asrResBean.languageConfidence1;
							markBean.languageconfidence2 = asrResBean.languageConfidence2;
							markBean.languageconfidence3 = asrResBean.languageConfidence3;
							markBean.languageconfidence4 = asrResBean.languageConfidence4;
							markBean.languageconfidence5 = asrResBean.languageConfidence5;
							markBean.languagename5 = asrResBean.languageName5;
							markBean.languagename4 = asrResBean.languageName4;
							markBean.languagename3 = asrResBean.languageName3;
							markBean.languagename2 = asrResBean.languageName2;
							markBean.languagename1 = asrResBean.languageName1;
						}
						
						this.radioMarkzstViewBean = markBean;
						
						RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.dataquery.audioquery.MarkService","setMark",markBean,setMarkBack,DataManager.showErrorMessageBack));
						//修改打分
					}else{
						this.radioMarkzstViewBean.counti = mark_i.text;
						this.radioMarkzstViewBean.counts = mark_s.text;
						this.radioMarkzstViewBean.counto = mark_o.text;
						this.radioMarkzstViewBean.edit_user = DataManager.user.userName;
						this.radioMarkzstViewBean.description = getDesc();
						this.radioMarkzstViewBean.remark = remark.text;
						//如果进行过识别
						if (asrResBean != null){
							this.radioMarkzstViewBean.asr_type = asrResBean.type;
							this.radioMarkzstViewBean.result_type = asrResBean.timePeriodType;
							this.radioMarkzstViewBean.status = asrResBean.status;
							this.radioMarkzstViewBean.wavelen = asrResBean.wavelen
							this.radioMarkzstViewBean.musicratio = asrResBean.musicratio;
							this.radioMarkzstViewBean.noiseratio = asrResBean.noiseratio;
							this.radioMarkzstViewBean.speechlen = asrResBean.speechlen;
							this.radioMarkzstViewBean.totalcm = asrResBean.totalcm;
							this.radioMarkzstViewBean.audibilityscore = asrResBean.audibilityScore;
							this.radioMarkzstViewBean.audibilityconfidence = asrResBean.audibilityConfidence;
							this.radioMarkzstViewBean.channelname = asrResBean.channelName;
							this.radioMarkzstViewBean.channelnameconfidence = asrResBean.channelNameConfidence;
							this.radioMarkzstViewBean.programname = asrResBean.programName;
							this.radioMarkzstViewBean.programnameconfidence = asrResBean.programNameConfidence;
							this.radioMarkzstViewBean.languageconfidence1 = asrResBean.languageConfidence1;
							this.radioMarkzstViewBean.languageconfidence2 = asrResBean.languageConfidence2;
							this.radioMarkzstViewBean.languageconfidence3 = asrResBean.languageConfidence3;
							this.radioMarkzstViewBean.languageconfidence4 = asrResBean.languageConfidence4;
							this.radioMarkzstViewBean.languageconfidence5 = asrResBean.languageConfidence5;
							this.radioMarkzstViewBean.languagename5 = asrResBean.languageName5;
							this.radioMarkzstViewBean.languagename4 = asrResBean.languageName4;
							this.radioMarkzstViewBean.languagename3 = asrResBean.languageName3;
							this.radioMarkzstViewBean.languagename2 = asrResBean.languageName2;
							this.radioMarkzstViewBean.languagename1 = asrResBean.languageName1;
						}
						RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.dataquery.audioquery.MarkService","editMark",this.radioMarkzstViewBean,setMarkBack,DataManager.showErrorMessageBack));
					}
				}
			}
			
			private function setMarkBack(str:String):void{
				//				DataManager.showErrorMessage(str);
				//				this.radioMarkzstViewBean.counti = "10";
				
				var mark_id:String = (str.split("=").length==2?str.split("=")[1]:"")
				if (mark_id != "")
					this.radioMarkzstViewBean.mark_id = mark_id;
				
				recordQuery.updateSIO(index,this.radioMarkzstViewBean);
				
				mark_s.text = "";
				mark_i.text = "";
				mark_o.text = "";
				descReset();
				remark.text = "";
				mark_s.setFocus();
			}
			
			private function sendCmdASRClient():void{
				var obj:Object = new Object;
				
				if (radioStremResultBean == null){
					DataManager.showErrorMessage("没有可进行语音识别的录音");
					return;
				}
				
				if (headendBean == null){
					DataManager.showErrorMessage("获取站点信息不正确,请与开发人员联系");
					return ;
				}
				
				obj.url = radioStremResultBean.url;
				obj.headend = headendBean;
				obj.freq = radioStremResultBean.frequency;
				var tmp:String = radioStremResultBean.filename;
				var lan:String = "";
				if (tmp.split("_").length >= 7)
					lan = tmp.split("_")[6];
				obj.language = lan;
				
				if (this.runplanBean != null && runplanBean.runplanType == "1"){
					obj.collectChannel = runplanBean.satellite_channel;
				}else{
					obj.collectChannel = "";
				}
				
				obj.start_datetime = radioStremResultBean.start_datetime;
				obj.end_datetime = radioStremResultBean.end_datetime;
				//				obj.runplanBean = this.runplanBean;
				//				//只有国际台运行图有通道号
				//				if (this.runplanBean != null && this.runplanBean.runplan_type_id == "1")
				//					
				//				else
				//					obj.collectChannel = "";
				
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.dataquery.audioquery.OnlineService","sendCmdASRClient",obj,sendCmdASRClientBack,DataManager.showErrorMessageBack));
			}
			
			
			private function sendCmdASRClientBack(asrResBean:ASRResBean):void{
				
				
				if (asrResBean.taskStatus == "204"){
					DataManager.showErrorMessage("语音识别系统返回的错误消息:\n"+asrResBean.errorMessage);
					return;
				}
				this.setAsrResValues(asrResBean);
				
				//				this.asrResBean = asrResBean;
				
				//				var audibilityscore:String = asrResBean.audibilityScore;
				//				//可听度分值
				//				asrAudibilityScore.text = audibilityscore;
				//				if (audibilityscore.split(',').length>2){
				//					mark_s.text = audibilityscore.split(',')[0];
				//					mark_i.text = audibilityscore.split(',')[1];
				//					mark_o.text = audibilityscore.split(',')[2];
				//				}
				//语言
				//				var lanArr:ArrayCollection  = new ArrayCollection;
				//语言置信度
				//				var lanConfArr:ArrayCollection  = new ArrayCollection;
				//				lanArr.addItem({label:asrResBean.languageName1,data:asrResBean.languageName1});
				//				lanArr.addItem({label:asrResBean.languageName2,data:asrResBean.languageName2});
				//				lanArr.addItem({label:asrResBean.languageName3,data:asrResBean.languageName3});
				//				lanArr.addItem({label:asrResBean.languageName4,data:asrResBean.languageName4});
				//				lanArr.addItem({label:asrResBean.languageName5,data:asrResBean.languageName5});
				//				
				//				lanConfArr.addItem({label:asrResBean.languageConfidence1,data:asrResBean.languageConfidence1});
				//				lanConfArr.addItem({label:asrResBean.languageConfidence2,data:asrResBean.languageConfidence2});
				//				lanConfArr.addItem({label:asrResBean.languageConfidence3,data:asrResBean.languageConfidence3});
				//				lanConfArr.addItem({label:asrResBean.languageConfidence4,data:asrResBean.languageConfidence3});
				//				lanConfArr.addItem({label:asrResBean.languageConfidence5,data:asrResBean.languageConfidence5});
				//				
				//				asrLanguage.dataProvider =lanArr;
				//				asrLanguageConfidence.dataProvider = lanConfArr;
			}
			
		
			
			/**
			 * 
			 * 为外部提供的传入给录音打分数据方法
			 */ 
			public function playAndMarkRec(index:int,recObj:*,headend:ResHeadendBean,task:Task=null,runplanBean:RunplanBean=null,radioMarkzstViewBean:RadioMarkZstViewBean=null):void{
				
				//传进来新值时对其复位
				asrResBean = null;
				clearValues();
				this.markType = 2;
				this.index = index;
				this.headendBean =  headend;
				this.task = task;
				this.runplanBean = runplanBean;
				this.radioMarkzstViewBean = radioMarkzstViewBean;
				
				if (recObj is RadioStreamResultBean){
					radioStremResultBean  = recObj;
					play(radioStremResultBean.url);
					
					level.text = radioStremResultBean.levelValue;
					am.text = radioStremResultBean.amModulation;
					fm.text = radioStremResultBean.fmModulation;
					
				}
				
				
			
				if (this.radioMarkzstViewBean != null){
					mark_s.text = this.radioMarkzstViewBean.counts;
					mark_i.text = this.radioMarkzstViewBean.counti;
					mark_o.text = this.radioMarkzstViewBean.counto;
					
					
					asrResBean = new ASRResBean();
					
					asrResBean.type = this.radioMarkzstViewBean.asr_type ;
					asrResBean.timePeriodType = this.radioMarkzstViewBean.result_type ;
					asrResBean.status = this.radioMarkzstViewBean.status ;
					asrResBean.wavelen = this.radioMarkzstViewBean.wavelen ;
					asrResBean.musicratio = this.radioMarkzstViewBean.musicratio ;
					asrResBean.noiseratio = this.radioMarkzstViewBean.noiseratio ;
					asrResBean.speechlen = this.radioMarkzstViewBean.speechlen ;
					asrResBean.totalcm = this.radioMarkzstViewBean.totalcm ;
					asrResBean.audibilityScore = this.radioMarkzstViewBean.audibilityscore ;
					asrResBean.audibilityConfidence = this.radioMarkzstViewBean.audibilityconfidence;
					asrResBean.channelName = this.radioMarkzstViewBean.channelname ;
					asrResBean.channelNameConfidence = this.radioMarkzstViewBean.channelnameconfidence ;
					asrResBean.programName = this.radioMarkzstViewBean.programname;
					asrResBean.programNameConfidence = this.radioMarkzstViewBean.programnameconfidence ;
					asrResBean.languageConfidence1 = this.radioMarkzstViewBean.languageconfidence1 ;
					asrResBean.languageConfidence2 = this.radioMarkzstViewBean.languageconfidence2 ;
					asrResBean.languageConfidence3 = this.radioMarkzstViewBean.languageconfidence3 ;
					asrResBean.languageConfidence4 = this.radioMarkzstViewBean.languageconfidence4 ;
					asrResBean.languageConfidence5 = this.radioMarkzstViewBean.languageconfidence5 ;
					asrResBean.languageName5 = this.radioMarkzstViewBean.languagename5 ;
					asrResBean.languageName4 = this.radioMarkzstViewBean.languagename4 ;
					asrResBean.languageName3 = this.radioMarkzstViewBean.languagename3 ;
					asrResBean.languageName2 = this.radioMarkzstViewBean.languagename2 ;
					asrResBean.languageName1 = this.radioMarkzstViewBean.languagename1 ;
					
					setAsrResValues(asrResBean);
					
				}
				
				

				
				_showQuality(true);
				
				if (this.runplanBean != null 
					&& this.runplanBean.runplan_id != 'undefined'
					&& this.runplanBean.runplan_id != ""){
					//一周打分情况
					//getMarkByPreWeek();
					_showSIO(true);
				}else{
					_showSIO(false);
				}
			}
			
			/**
			 * 
			 * 为外部提供的传入给实时音频打分数据方法
			 */ 
			public function playAndMarkReal(url:String,headend:ResHeadendBean,task:Task=null,runplanBean:RunplanBean=null):void{
				//传进来新值时对其复位
				asrResBean = null;
				
				this.markType = 1;
				
				this.headendBean =  headend;
				this.task = task;
				this.runplanBean = runplanBean;
				
				play(url);
				
				_showQuality(false);
				_showSIO(false);
				_showMarkSIO(false);
				
				
			}
			
			/**
			 * 
			 * 为外部提供的只播放节目的方法
			 */ 
			public function play(url:String):void{
				//MM.show(url);
				player.setText("正在播放...");
				player.playUrl(url);
			}
			
			
			/**
			 * 显示隐藏标指值控件
			 */ 
			private function _showQuality(b:Boolean):void{
				qualityH.visible = b;
				qualityH.includeInLayout = b;
			}
			
			/**
			 * 显示隐藏一周SIO值控件
			 */ 
			private function _showSIO(b:Boolean):void{
				sioV.visible = b;
				sioV.includeInLayout = b;
				line1.visible = b;
				line1.includeInLayout= b;
			}
			
		
			
			/**
			 * 显示隐藏SIO打分值控件
			 */ 
			private function _showMarkSIO(b:Boolean):void{
				markV.visible = b;
				markV.includeInLayout = b;
				
			}
			
			
			/**
			 * 清除打分和语音识别结果
			 */ 
			private function clearValues():void{
				level.text = "";
				am.text = "";
				fm.text = "";
				sioArray.removeAll();
				
				descReset();
				
				remark.text = "";
				
		
				//asrValue.text = "";
			}
			
			private function setAsrResValues(asrResBean:ASRResBean):void{
				this.asrResBean = asrResBean;
				
//				if(asrResBean.audibilityScore!=null);
//				{
//				mark_s.text = asrResBean.audibilityScore.split(',')[0];
//				mark_i.text = asrResBean.audibilityScore.split(',')[1];
//				mark_o.text = asrResBean.audibilityScore.split(',')[2];
//				}
//				
//				
//				var lanArr:ArrayCollection = new ArrayCollection();
//				var lanCArr:ArrayCollection = new ArrayCollection();
//				lanArr.addItem({label:asrResBean.languageName1,data:asrResBean.languageName1});
//				lanArr.addItem({label:asrResBean.languageName2,data:asrResBean.languageName2});
//				lanArr.addItem({label:asrResBean.languageName3,data:asrResBean.languageName3});
//				lanArr.addItem({label:asrResBean.languageName4,data:asrResBean.languageName4});
//				lanArr.addItem({label:asrResBean.languageName5,data:asrResBean.languageName5});
//				
//				lanCArr.addItem({label:asrResBean.languageConfidence1,data:asrResBean.languageConfidence1});
//				lanCArr.addItem({label:asrResBean.languageConfidence2,data:asrResBean.languageConfidence2});
//				lanCArr.addItem({label:asrResBean.languageConfidence3,data:asrResBean.languageConfidence3});
//				lanCArr.addItem({label:asrResBean.languageConfidence4,data:asrResBean.languageConfidence4});
//				lanCArr.addItem({label:asrResBean.languageConfidence5,data:asrResBean.languageConfidence5});
//				
			}
			
			
			protected function remark_keyDownHandler(event:KeyboardEvent):void
			{
				// TODO Auto-generated method stub
				if (event.keyCode == 13)
					setMark();
			}
			
		]]>
	</fx:Script>
	<s:Group width="100%" height="100%" textAlign="center" verticalCenter="true" horizontalCenter="true">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup width="100%" gap="0">
			<player:Player id="player" mode="record" width="100%" height="80"/>
			<s:HGroup width="100%" height="25" paddingLeft="10" paddingTop="5" id="qualityH">
				<s:Label text="电平:"/><s:Label id="level"/>
				<s:Label text="调幅度:"/><s:Label id="am"/>
				<s:Label text="调制度:"/><s:Label id="fm"/>
			</s:HGroup>
		</s:VGroup>
		
		<s:VGroup width="100%" height="100" gap="0" id="sioV">
			<!--s:HGroup width="100%" height="25">
			<s:Label text="干扰情况:"/>
			<s:Label text="同频"/>
			</s:HGroup>
			<s:HGroup width="100%" height="25">
			<s:Label text="一周打分:"/>
			<s:Label text="3,2,3,3,1,1,3"/>
			</s:HGroup-->
			
			<mx:LineChart id="lineChart" dataProvider="{sioArray}" showDataTips="true" width="100%" height="100%">
				<mx:horizontalAxis>
					<mx:CategoryAxis dataProvider="{sioArray}" categoryField="mark_datetime"/>
				</mx:horizontalAxis>
				<mx:verticalAxis>
					<mx:LinearAxis  maximum="{maxSIO}" maximumLabelPrecision="1" minimum="{minSIO}"/>
				</mx:verticalAxis>
				<mx:series>
					<!--mx:LineSeries yField="counts" displayName="S"/>
					<mx:LineSeries yField="counti" displayName="I"/-->
					<mx:LineSeries yField="counto" displayName="O"/>
				</mx:series>
			</mx:LineChart>
			<mx:Legend dataProvider="{lineChart}" direction="horizontal" paddingTop="0"/>
		</s:VGroup>
		
		<mx:HRule id="line1" strokeWidth="1" strokeColor="#a0a0a0" shadowColor="#000000" width="100%" />
		
		<s:VGroup width="100%" id="markV" gap="0">
			<s:HGroup width="100%"  height="25" verticalCenter="middle" verticalAlign="middle">
				<s:Label text="S:"/>
				<utils:RegExpTextInput id="mark_s" width="40" keyUp="mark_keyup(event)" maxChars="1" tabIndex="1" regex="/^[0-5]\d*$/" />
				<!--s:Label text="/" /-->
				<s:Label text="I:"/>
				<utils:RegExpTextInput id="mark_i" width="40" keyUp="mark_keyup(event)" maxChars="1" tabIndex="2" regex="/^[1-5]\d*$/" />
				<s:Label text="O:"/>
				<utils:RegExpTextInput id="mark_o" width="40" keyUp="mark_keyup(event)" maxChars="1" tabIndex="3" regex="/^[0-5]\d*$/" />
				
				<s:Label id="error" width="120" color="0xffff00"/>
			</s:HGroup>
			<s:HGroup width="100%"  height="25" verticalAlign="middle">
				<s:Label text="干扰类型:"/>
				<s:CheckBox id="cJ" label="J" change="descChange(event)" keyDown="remark_keyDownHandler(event)"/>
				<s:CheckBox id="cT" label="T" change="descChange(event)" keyDown="remark_keyDownHandler(event)"/>
				<s:CheckBox id="cH" label="H" change="descChange(event)" keyDown="remark_keyDownHandler(event)"/>
			</s:HGroup>
			<s:HGroup width="100%"  height="25" paddingLeft="56" verticalAlign="middle">
				<s:CheckBox id="cBC" label="B.C" change="descChange(event)" keyDown="remark_keyDownHandler(event)"/>
				<!--s:CheckBox id="cC" label="C" change="descChange(event)" /-->
				<s:CheckBox id="cHC" label="HC" change="descChange(event)" keyDown="remark_keyDownHandler(event)"/>
				<s:CheckBox id="cQ" label="Q" change="descChange(event)" keyDown="remark_keyDownHandler(event)"/>
			</s:HGroup>
			<s:HGroup width="100%"  height="25" verticalAlign="middle">
				<s:DropDownList dataProvider="{tlp}"  width="70" selectedIndex="0"/>
				
				<s:Spacer width="5"/>
				
				<s:Label text="备注:" /><s:TextInput id="remark"  keyDown="remark_keyDownHandler(event)" width="100"/>
				
				<s:Button buttonMode="true" label="打分" click="setMark();"/>
				<s:Spacer width="5"/>
				<s:Button buttonMode="true" label="一周分值展示" click="getMarkByPreWeek();"/>
				
			</s:HGroup>
		</s:VGroup>
		
		<mx:HRule id="line2" strokeWidth="1" strokeColor="#a0a0a0" shadowColor="#000000" width="100%" />
		
		
	</s:Group>
</s:VGroup>
