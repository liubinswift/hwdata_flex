<?xml version="1.0" encoding="utf-8"?>
<system:BasePage xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:system="com.morcha4.frame.system.*" 
				 width="100%" height="100%"  backgroundColor1="0xe3d4bd" backgroundColor2="0xaf8555" 
				 xmlns:timecomp="com.viewscenes.utils.timecomp.*" xmlns:DataGrid="mor.DataGrid.*" 
				 creationComplete="initApp();"
				 xmlns:util="com.viewscenes.utils.*"
				 xmlns:flipBar="com.viewscenes.utils.flipBar.*"
				 xmlns:global="com.viewscenes.global.*" 
				 PAGE_CLOSE="basepage1_PAGE_CLOSEHandler(event)"
				 xmlns:mark="com.viewscenes.module.dataquery.audioquery.*" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:iframe="com.morcha4.ui.iframe.*">
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:RadioButtonGroup id="timeCheckGrp" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.morcha4.RPC.RPCManager;
			import com.morcha4.RPC.request.RORequestParam;
			import com.morcha4.frame.system.EventBus;
			import com.morcha4.util.RendererUtil;
			import com.viewscenes.beans.RadioMarkZstViewBean;
			import com.viewscenes.beans.RadioStreamResultBean;
			import com.viewscenes.beans.pub.ResHeadendBean;
			import com.viewscenes.beans.runplan.RunplanBean;
			import com.viewscenes.beans.task.Task;
			import com.viewscenes.global.DataManager;
			import com.viewscenes.global.EventDeclare;
			import com.viewscenes.global.comp.MM;
			import com.viewscenes.utils.StringTool;
			import com.viewscenes.utils.timecomp.DateUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			
			//数据库录音文件数据
			[Bindable]
			private var recFileArray:ArrayCollection = new ArrayCollection();
			
			//录音类型  0：效果录音，1质量录音，2实时录音，3：临时录音
			[Bindable]
			private var recTypes:ArrayCollection =  new ArrayCollection([{label:"全部",data:"-1"},{label:"效果录音",data:"1"},{label:"质量录音",data:"0"}]);
			
			[Bindable]
			private var runplanType:ArrayCollection = new ArrayCollection([{label:"全部",data:""},{label:"国际台运行图",data:"1"},{label:"海外落地运行图",data:"2"}]);
			
			[Bindable]
			private var handles:ArrayCollection = new ArrayCollection([{label:"全部",data:"-1"},{label:"未处理",data:"0"},{label:"已处理",data:"1"}]);
			
			[Bindable]
			public var selectedCounts:int =0;
			[Bindable]
			private var headtype:int=1;
			
			//遥控站点
			[Bindable]
			public var ykzArr:ArrayCollection = new ArrayCollection;
			//采集点
			[Bindable]
			public var cjdArr:ArrayCollection = new ArrayCollection;
			//站点
			[Bindable]
			public var headendArr:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var headTypes:ArrayCollection=new ArrayCollection([{label:"遥控站",data:"102"},{label:"采集点",data:"101"}]);
			
			//节目类型
			[Bindable]
			private var programTypes:ArrayCollection = new ArrayCollection([{label:"全部",data:""},{label:"国际台节目",data:"1"},{label:"海外落地节目",data:"2"}]);
			
			//发射台
			[Bindable]
			private var stationArr:ArrayCollection = new ArrayCollection;
			
			//语言
			[Bindable]
			private var lanaguageArr:ArrayCollection = new ArrayCollection;
			
			//当前正在播放的录音对象。
			[Bindable]
			private var radioStreamResultBean:RadioStreamResultBean = new RadioStreamResultBean;
			
			
			private function initApp():void{
				EventBus.addEventListener(EventDeclare.SHOW_MENU_2,basepage1_PAGE_CLOSEHandler);
				typeChange();
				getLanguageList();
				getStationList();
			}
			/**
			 * 
			 * 发射台
			 * */
			private function getStationList():void{
			
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.common.Common","getStationList",null,getStationListBack,DataManager.showErrorMessageBack));
			}
			
			private function getStationListBack(arr:ArrayCollection):void{
				stationArr.removeAll();
				stationArr = arr;
				stationArr.addItemAt({name:"全部",value:null},0);
				station.selectedIndex = 0;
			}
			
			
			/**
			 * 
			 * 语言
			 * */
			private function getLanguageList():void{
				
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.common.Common","getLanguageList",null,getLanguageListBack,DataManager.showErrorMessageBack));
			}
			
			private function getLanguageListBack(arr:ArrayCollection):void{
				lanaguageArr.removeAll();
				lanaguageArr = arr;
				lanaguageArr.addItemAt({language_name:"全部",language_id:null},0);
				language.selectedIndex = 0;
			}
			
			private function focusout(textinput:TextInput):void
			{
				var str:String=textinput.text;
				while(str.charAt(0)=='0')
				{
					str=str.substring(1,str.length);
				}
				textinput.text=str;
			}
			private function timeCheck(e:MouseEvent):void
			{
				if(e.target.label=="按时间段")
				{ 
					startDatetime.includeInLayout=true;
					day.includeInLayout=false;
					startDatetime.visible=true;
					startDatetime.includeInLayout = true;
					day.visible=false;
					endtimelabel.visible=true;
					endDatetime.visible=true;
					endDatetime.includeInLayout = true;
					//					space1.visible=true;
					//					space1.includeInLayout=true;
					//					space2.visible=true;
					//					space2.includeInLayout=true;
					begintimelabel.text="起始时间：";
				}
				else
				{
					startDatetime.includeInLayout=false;
					day.includeInLayout=true;
					day.visible=true;
					startDatetime.visible=false;
					endtimelabel.visible=false;
					endDatetime.visible=false;
					endDatetime.includeInLayout = false;
					//					space1.visible=false;
					//					space1.includeInLayout=false;
					//					space2.visible=false;
					//					space2.includeInLayout=false;
					begintimelabel.text="查询时间：";
				}
				
			}
			
			
			/**
			 * 查询数据库录音文件及相关打分信息
			 */ 
			private function recFileQuery():void//主要作用在于初始化
			{
				btn1.label="本页全选";
				selectState=false;
				recFileArray.removeAll();
//				if (headend.headend.selectedItem == undefined || headend.headend.selectedItem.shortname == "全部"){
//					DataManager.showErrorMessage("请先选择要查询的站点");
//					return ;
//				}
				
				//校验频率
				if (freq.text != "" && StringTool.getBandFromFreq(freq.text) == ""){
					DataManager.showErrorMessage("输入的频率范围不合法,请重新输入");
					freq.setFocus();
					return ;
				}
				
				//校验时间
				var result:Number = DateUtil.compareDateStr(startDatetime.text,endDatetime.text);
				if (result != -1){
					DataManager.showErrorMessage("开始时间不能大于或等于结束时间");
					return ;
				}
				
				showTips(true,"正在查询,请稍候...");
				var obj:Object = new Object;
				//录音类型
				obj.recType = type.selectedItem.data;
			
				if (newHead.selectedItem == undefined || newHead.selectedItem.shortname == "全部"){
					obj.headCode="";
				}else{
					obj.headCode = newHead.selectedItem.code;
				}
				obj.freq = freq.text;
				obj.dateType = timeCheckGrp.selectedValue;
				if (timeCheckGrp.selectedValue == "byDate")
					obj.date = day.text;
				else{
					obj.startDateTime = startDatetime.text;
					obj.endDateTime = endDatetime.text;
				}
				obj.handle = handle.selectedItem.data;
				obj.runplanType = runplanTypeList.selectedItem.data;
				//站点类型101,102
				obj.headtype = obj.headType=headType.selectedItem.data;
				
				if(station.selectedIndex!=0){
					obj.station=station.selectedItem.station_id;
				}
				if(language.selectedIndex!=0){
					obj.language=language.selectedItem.label;
				}
				pagebar11.m_sendCmd(new RORequestParam("com.viewscenes.web.dataquery.audioquery.RecFileQuery","recFileQuery",obj,recFileQueryBack,DataManager.showErrorMessageBack));
			}
			
			
			private function recFileQueryBack(arr:ArrayCollection):void{
				if (arr.length ==0)
					showTips(true,"查询无数据!");
				else
					showTips(false);
				
				recFileArray = arr;
//				recFileArray.addItemAt(new RadioStreamResultBean(),0);
				recFileArray.refresh();
			}
			
			
			private function playAndMark(obj:Object):void{  
				var radioStreamResultBean:RadioStreamResultBean = (obj.data as RadioStreamResultBean);
				var index:int = recFileArray.getItemIndex(obj.data);
				var headendBean:ResHeadendBean = DataManager.getHeadendById(radioStreamResultBean.head_id);
			
				
				var task:Task = new Task;
				task.task_id = radioStreamResultBean.task_id;
				task.freq = radioStreamResultBean.frequency;
				var runplanBean:RunplanBean = radioStreamResultBean.runplanBean;
				var radioMarkzstViewBean:RadioMarkZstViewBean = radioStreamResultBean.radioMarkZstViewBean;
			
				if (radioMarkzstViewBean != null && radioMarkzstViewBean.mark_id == "")
					radioMarkzstViewBean = null;
				//运行图录音任务
				if (runplanBean.runplan_id != null && runplanBean.runplan_id != "")
					radioMark.playAndMarkRec(index,radioStreamResultBean,headendBean,task,runplanBean,radioMarkzstViewBean);
					//临时录音任务
				else
					radioMark.playAndMarkRec(index,radioStreamResultBean,headendBean,task,null,radioMarkzstViewBean);
				radioMark.mark_s.setFocus();
			}
			
			public function updateSIO(index:int,radioMark:RadioMarkZstViewBean):void{
				var rsrb:RadioStreamResultBean = recFileArray.getItemAt(index) as RadioStreamResultBean;
				
				recFileArray.removeItemAt(index);
				rsrb.radioMarkZstViewBean = radioMark;
				recFileArray.addItemAt(rsrb,index);
				
				autoPlayNext(index+1);
			}
			
			private function autoPlayNext(index:int):void{
				if (index >-1 && (index <= recFileArray.length-1)){
					var rsrb:RadioStreamResultBean = recFileArray.getItemAt(index) as RadioStreamResultBean;
					var obj:Object = new Object;
					obj.data = rsrb;
					playAndMark(obj);
					
					result.selectedIndex = index;
				}
			}
			
			/**
			 * 下载录音文件
			 */ 
			private function downloadRec(obj:Object):void{
				var radioStreamResultBean:RadioStreamResultBean = obj.data as RadioStreamResultBean;
				var url:String = radioStreamResultBean.url;
				//				Alert.show(url);
				//				url = url.replace("http","ftp");
//				var arr:Array = new Array();
//				url=url.replace("http","ftp");
//				arr.push(url);
//				downloadHtml.callIFrameFunction("downloadByUrl",arr);
				downLoadFiles(url);
			}
			
			private var downloadURL:URLRequest;
			private var DownLoadfile:FileReference; //这是要主要的地方
			/**
			 * 下使用FileReference组件下载
			 */
			private function downLoadFiles(urlAdd:String):void
			{
				var filename:String = urlAdd.substring(urlAdd.lastIndexOf("/")+1,urlAdd.length);
				urlAdd = encodeURI(urlAdd);
				downloadURL = new URLRequest(urlAdd);
				try{
					DownLoadfile = new FileReference();
				} catch(e:Error){
					MM.show(e.errorID+"A");
				}
				configureListeners(DownLoadfile);
				DownLoadfile.download(downloadURL,filename);
			}
			private function configureListeners(dispatcher:IEventDispatcher):void {
				dispatcher.addEventListener(Event.COMPLETE, completeHandler);
				dispatcher.addEventListener(IOErrorEvent.IO_ERROR, errorShow);
				
			}
			private function completeHandler(event:Event):void {
				MM.show("文件下载成功");
			}
			private function errorShow(event:IOErrorEvent):void {
				if(event.errorID == 2038){
					MM.show("文件不存在");
				} else{
					MM.show(event.text);
				}
			}
			/**
			 * 删除录音文件
			 */ 
			private function delRecFile(obj:Object):void{
				 radioStreamResultBean = obj.data as RadioStreamResultBean;
				MM.show("您确定要删除吗?","删除录音文件","",confirmDelone,true,null,null);
		}
			private function confirmDelone():void{
				
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.dataquery.audioquery.RecFileQuery","delRecFile",radioStreamResultBean,delRecFileBack,DataManager.showErrorMessageBack));
		}
		
			
			private function delRecFileBack(msg:String):void{
				DataManager.showErrorMessage(msg);
				
				recFileQuery();
			}
			
			//			/**
			//			 * 打分标签
			//			 */ 
			//			private function markLabelFunc(item:Object,gc:GridColumn):String
			//			{
			//				var rmzvb:RadioMarkZstViewBean = item.radioMarkZstViewBean as RadioMarkZstViewBean;
			//				if (rmzvb!=null && rmzvb.mark_id != "")
			//					return rmzvb.counts +"/"+ rmzvb.counti +"/"+ rmzvb.counto;
			//				else 
			//					return "";
			//			}
			
			/**
			 * 语言标签
			 */ 
			private function languageLabelFunc(item:Object,gc:GridColumn):String
			{
				if (item.language == null || item.language == ""){
					var runplanBean:RunplanBean = item.runplanBean as RunplanBean;
					if (runplanBean != null)
						return runplanBean.program_name;
					else 
						return "";
				}else{
					return item.language;
				}
			}
			
			/**
			 * 发射台标签
			 */ 
			private function stationLabelFunc(item:Object,gc:GridColumn):String
			{
				if (item.stationName == null || item.stationName == ""){
					var runplanBean:RunplanBean = item.runplanBean as RunplanBean;
					if (runplanBean != null)
						return runplanBean.station_name;
					else 
						return "";
				}else{
					return item.stationName;
				}
			}
	
			/**
			 * 查询时提示信息
			 */ 
			private function showTips(b:Boolean,msg:String=""):void{
				
				if (b == true){
					clew_label.y = result.y+32;
					clew_label.visible = true;
					clew_label.includeInLayout = true;
					clew_label.text = msg;//"正在查询,请稍候...";
				}else{
					clew_label.visible = false
					clew_label.includeInLayout = false;
					clew_label.text = "";
				}
			}
			
			/**
			 * 波段标签
			 */ 
			private function bandLabelFunc(item:Object,gc:GridColumn):String
			{
				if (item.band == "0")
					return "短波";
				else if (item.band == "1")
					return "中波";
				else
					return "调频";
			}
			
			/**
			 * 录音类型标签
			 */
			private function reportTypeLabelFunc(item:Object,gc:GridColumn):String
			{
				if (item.report_type == "0")
					return "效果";
				else if (item.report_type == "1")
					return "质量";
				else if (item.report_type == "2")
					return "实时";
				else if (item.report_type == "3")
					return "临时";
				else
					return "";
			}
			
	
			/**
			 * 关闭页面时，关闭播放器
			 */ 
			protected function basepage1_PAGE_CLOSEHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				radioMark.player.stop();
			}
			//选择点中后执行的方法
			private function changeSelect(obj:Object):void{
				
				if(obj.data.isSelected=="true"){
					this.selectedCounts=selectedCounts+1;  
				}else{
					this.selectedCounts=selectedCounts-1; 
				}
			}
			/**
			 * 删除录音文件
			 * */
			public var runplanIDs:String="";
			private function del():void{
				
				for(var i:int=0;i<recFileArray.length;i++){
					var obj:Object = new Object();
					obj = recFileArray.getItemAt(i) as Object;
					if(obj.isSelected=="true"){
						runplanIDs+=obj.result_id+",";
					}
				}
				if(runplanIDs!=""){
					MM.show("您确定要删除吗?","删除录音文件","",confirmDel,true,cancelHandler,null);
				}else{
					DataManager.showErrorMessage("请选择要删除的录音文件!");
					return;
				}
				
			}
			/**
			 * 取消回调方法
			 * */
			private function cancelHandler():void{
				runplanIDs="";
			}
			
			
			
			private function confirmDel():void{
			
					var obj:Object = new Object;
					obj.ids = runplanIDs.substr(0,runplanIDs.length-1);
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.dataquery.audioquery.RecFileQuery","delSelectFile",
					obj,delRunplanBack,DataManager.showErrorMessageBack));
			}
			private function delRunplanBack(res:String):void{
				runplanIDs="";
			
				recFileQuery();
				DataManager.showErrorMessage(res);
			}
			private var selectState:Boolean = false;// 记录选中的状态
			private function selectAll():void{
				if(btn1.label=="本页全选"){
					btn1.label="取消全选";
					selectState=true;
				}else{
					btn1.label="本页全选";
					selectState=false;
				}
				for(var i:int=0;i<recFileArray.length;i++){
					var obj:Object = recFileArray.getItemAt(i) as Object;
					obj.isSelected=selectState;
				}
				recFileArray.refresh();
			}
			/**
			 * 站点类型改变
			 */
			private function typeChange():void{
				//				recFileArray.removeAll();
				//				audioPlayer.player.stop();
				cjdArr=DataManager.getHeadendByState("all","101",true);	
				cjdArr.addItemAt({shortname:"全部",code:""},0);
				ykzArr=DataManager.getHeadendByState("all","102",true);
				ykzArr.addItemAt({shortname:"全部",code:""},0);
				
				if(headType.selectedItem.label.toString()=="采集点"){
					headtype=0;
					con_clewlabel(clew_label,false);
					//headendArr.removeAll();
					//var arrlist:ArrayCollection =  StringTool.clone(cjdArr);
					headendArr=cjdArr;
					headendArr.refresh();
					newHead.selectedIndex=0;	
					
				}else if(headType.selectedItem.label.toString()=="遥控站"){	
					headtype=1;
					con_clewlabel(clew_label,false);
					//headendArr.removeAll();
					//bvar arrlist:ArrayCollection =  StringTool.clone(ykzArr);	
					headendArr=ykzArr;
					headendArr.refresh();
					newHead.selectedIndex=0;	
					
				}
			}
			public function con_clewlabel(_component:Label,_visible:Boolean,_label:String="")
			{
				_component.visible=_visible;
				_component.includeInLayout=_visible;
				_component.text=_label;
			}
			/**
			 * 波段标签
			 */
			private function bandFunction(item:Object,gc:GridColumn):String{
				if(item.band=="0"){
					return "短波";
				}else if(item.band=="1"){
					return "中波";
				}else{
					return "调频";
				}
			}
			/**
			 * 录音类型标签
			 */
			private function reportFunction(item:Object,gc:GridColumn):String{
				if(item.report_type=="1"){
					return "效果";
				}else if(item.report_type=="0"){
					return "质量";
				}else {
					return "";
				}
			}
			/**
			 * 打分人
			 */
			private function markUserFunction(item:Object,gc:GridColumn):String{
				var mark:RadioMarkZstViewBean = item.radioMarkZstViewBean as RadioMarkZstViewBean;
				if(mark!=null){
					if(mark.edit_user!=null&&mark.edit_user!=""){
						return mark.edit_user;
					}else {
						return mark.mark_user;
					}
				}else 
					return "";
			}
			/**
			 * 节目标签
			 */
			private function programLabelFunc(item:Object,gc:GridColumn):String{
				var runplanBean:RunplanBean=item.runplanBean as RunplanBean;
				if (runplanBean!=null){
					return runplanBean.language_name;
				}else{
					return "";
				}
				
			}
			/**
			 * 打分标签
			 */
			private function markFunction(item:Object,gc:GridColumn):String{
				var radioMarkZstViewBean:RadioMarkZstViewBean =item.radioMarkZstViewBean as RadioMarkZstViewBean;
				if(radioMarkZstViewBean!=null&&radioMarkZstViewBean.mark_id!=""){
					return radioMarkZstViewBean.counts+"/"+radioMarkZstViewBean.counti+"/"+radioMarkZstViewBean.counto;
				}else {
					return "";
				}
			}
		]]>	
	</fx:Script>
	<s:HGroup width="100%" height="100%">
		<s:VGroup  verticalAlign="middle" width="78%" height="100%" paddingLeft="5">
			
			<s:HGroup height="38" width="100%" verticalAlign="middle">
				<s:Label text="录音类型："/>
				<s:DropDownList id="type" dataProvider="{recTypes}"  selectedIndex="1" width="90"/>
				
				<s:Label text="站点类别"/>
				<s:DropDownList id="headType" dataProvider="{headTypes}" requireSelection="true" change="typeChange()" selectedIndex="0" width="80"/>
				
				<s:Label text="站点" />
				<s:ComboBox id="newHead"  dataProvider="{headendArr}" labelField="shortname" width="110"/>
				
				<s:Label text="频率："/>
				<s:TextInput id="freq" textAlign="left" restrict="0-9" maxChars="6" width="55" focusOut="focusout(freq)"/>
				<s:Label text="节目类型："/>
				<s:DropDownList id="runplanTypeList" dataProvider="{runplanType}" selectedIndex="0" width="100"/>
				
				<s:Label text="处理："/>
				<s:DropDownList id="handle" dataProvider="{handles}"  selectedIndex="0" width="80"/>
			</s:HGroup>
			<s:HGroup height="38" width="100%" verticalAlign="middle">
				
				<s:Label text="发射台:"/>
				<s:DropDownList id="station"  width="70" requireSelection="true" selectedIndex="0" dataProvider="{stationArr}" labelField="name"/>
				
				<s:Label text="语言:"/>
				<s:DropDownList id="language"  width="70"  requireSelection="true" selectedIndex="0"  dataProvider="{lanaguageArr}" labelField="language_name"/>
				
				<s:RadioButton label="按时间段" groupName="timeCheckGrp" value="byTime" selected="true" click="timeCheck(event)"/>
				<s:RadioButton label="按日期" groupName="timeCheckGrp" value="byDate" click="timeCheck(event)"/>		
				
				<s:Label text="起始时间：" id="begintimelabel"/>
				<timecomp:TimeNew id="startDatetime" starttime="00:00:00"/>
				<timecomp:TimeNew id="day" dateDisplay="date" visible="false" includeInLayout="false"/>
				<!--s:Spacer width="4" id="space1"/-->	
				<s:Label text="结束时间：" id="endtimelabel"/>
				<timecomp:TimeNew id="endDatetime" />
				
				<s:Button buttonMode="true"  label="查询" click="recFileQuery()" styleName="ButtonBlack"/>
				<s:Button buttonMode="true" id="btn1" label="本页全选" click="selectAll()"/>
				<s:Button buttonMode="true" label="删除" click="del()"/>
				
				
			</s:HGroup>
			
			
			<s:VGroup width="100%" height="100%">
				<mx:Canvas width="100%" height="100%">
					<s:DataGrid width="100%" height="100%" id="result" textAlign="center" dataProvider="{recFileArray}">
						<s:columns>
							<s:ArrayCollection>
								<!--s:GridColumn headerText="波段" dataField="band" labelFunction="bandLabelFunc" width="60" /-->
								<s:GridColumn headerText="选择"		itemRenderer="{RendererUtil.getCheckBoxRenderer(changeSelect)}" width="50"/>
								<s:GridColumn headerText="站点" 		dataField="head_name" width="80"/>
								<s:GridColumn headerText="频率" 		dataField="frequency" width="60"/>
								<s:GridColumn headerText="开始时间" 	dataField="start_datetime"/>
								<s:GridColumn headerText="结束时间" 	dataField="end_datetime"/>
								<s:GridColumn headerText="录音类型" 	dataField="report_type" labelFunction="reportFunction"/>
								<s:GridColumn headerText="发射台"  	labelFunction="stationLabelFunc" width="110"/>
								<s:GridColumn headerText="语言" 		labelFunction="programLabelFunc" width="110"/>
								<s:GridColumn headerText="分数"  	labelFunction="markFunction"/>
								<s:GridColumn headerText="打分人"  	labelFunction="markUserFunction"/>
								<s:GridColumn headerText="播放"   itemRenderer="{RendererUtil.getButtonRenderer('播放',playAndMark)}"/>
								<s:GridColumn headerText="下载"   itemRenderer="{RendererUtil.getButtonRenderer('下载',downloadRec)}"/>
								<s:GridColumn headerText="删除"   itemRenderer="{RendererUtil.getButtonRenderer('删除',delRecFile)}"/>
							</s:ArrayCollection>
						</s:columns>
					</s:DataGrid>
					<s:Label text="正在查询，请稍候..." color="0x000000" id="clew_label" y="{result.columnHeaderGroup.height+10}" width="100%" textAlign="center"  visible="false" includeInLayout="false" />				
				</mx:Canvas>
				<!--分页组件所在地-->
				<flipBar:PageBar  id="pagebar11" rowConutOfPage="25" totalPageQuery="10" height="20"/>
			</s:VGroup>
		</s:VGroup>
		<s:Group width="22%" height="100%" >
			
			<mark:RadioMark id="radioMark" recordQuery="{this}"  paddingTop="5" paddingRight="5" width="100%" height="100%"/>
		</s:Group>
		
	</s:HGroup>
	
	<iframe:HTML  id="downloadHtml" source="com/viewscenes/utils/download/download.html"  visible="false" width="0" height="0"/>
</system:BasePage>
